font_family IosevkaTerm Nerd Font Mono Regular
bold_font IosevkaTerm Nerd Font Mono Bold
italic_font IosevkaTerm Nerd Font Mono Italic
bold_italic_font IosevkaTerm Nerd Font Mono Bold Italic

modify_font cell_height -18px
modify_font baseline 8
modify_font cell_width 88%

font_size 22

repaint_delay 8
input_delay 0
sync_to_monitor no

dynamic_background_opacity yes
background_opacity 0.86
background_blur 18

copy_on_select yes

include current-theme.conf

# never stop blinking cursor
cursor_stop_blinking_after 0

allow_remote_control socket-only
listen_on unix:/tmp/kitty

# hide mouse cursor immediately when typing text
mouse_hide_wait -1

cursor_beam_thickness 1

# use system default cursor blink interval
cursor_blink_interval -1

# use the traditional full-screen transition, that is faster, but less pretty
macos_traditional_fullscreen yes

macos_show_window_title_in window

enable_audio_bell no
visual_bell_duration 0.1
visual_bell_color red

modify_font underline_thickness 200%

scrollback_fill_enlarged_window yes

cursor none

kitty_mod cmd

tab_bar_style powerline

active_tab_background #ff00ff
active_tab_foreground #000000
inactive_tab_background #1c1c1c
inactive_tab_foreground #d3d3d3
tab_bar_background #000000
tab_bar_edge #ff00ff

confirm_os_window_close 0

notify_on_cmd_finish unfocused

paste_actions quote-urls-at-prompt,replace-dangerous-control-codes

# thinner fonts
text_composition_strategy legacy

map cmd+left send_text all \x1b[1;5D
map cmd+right send_text all \x1b[1;5C

# macos_colorspace displayp3
# macos_colorspace default

# # hide the kitty window from running tasks on macOS
# macos_hide_from_tasks yes

# allow_remote_control socket-only


#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name

#: Cursor customization {{{

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background. Note that if cursor is set to none
#: then this setting is ignored.

# cursor_shape block

#: The cursor shape can be one of (block, beam, underline). Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape. Applications running in the terminal
#: can override it. In particular,
#: https://sw.kovidgoyal.net/kitty/shell-integration/ in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.

#: Defines the thickness of the beam cursor (in pts)

# cursor_underline_thickness 2.0

#: Defines the thickness of the underline cursor (in pts)


#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager_history_size 0

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores the data in UTF-8, so approximatively 10000
#: lines per megabyte at 100 chars per line, for pure ASCII text,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.


# wheel_scroll_multiplier 5.0

#: Modify the amount scrolled by the mouse wheel. Note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macOS and Wayland. Use negative
#: numbers to change scroll direction.

# touch_scroll_multiplier 1.0

#: Modify the amount scrolled by a touchpad. Note this is only used
#: for high precision scrolling devices on platforms such as macOS and
#: Wayland. Use negative numbers to change scroll direction.

#: }}}

#: Mouse {{{

# url_color #0087bd
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler (open on macOS and xdg-open on Linux).

# url_prefixes http https file ftp gemini irc gopher mailto news git

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# default_pointer_shape beam

#: Mouse actions {{{

#: Mouse buttons can be remapped to perform arbitrary actions. The
#: syntax for doing so is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where ``button-name`` is one of ``left``, ``middle``, ``right`` or
#: ``b1 ... b8`` with added keyboard modifiers, for example:
#: ``ctrl+shift+left`` refers to holding the ctrl+shift keys while
#: clicking with the left mouse button. The number ``b1 ... b8`` can
#: be used to refer to upto eight buttons on a mouse.

#: ``event-type`` is one ``press``, ``release``, ``doublepress``,
#: ``triplepress``, ``click`` and ``doubleclick``.  ``modes``
#: indicates whether the action is performed when the mouse is grabbed
#: by the program running in the terminal, or not. It can have one or
#: more or the values, ``grabbed,ungrabbed``. ``grabbed`` refers to
#: when the program running in the terminal has requested mouse
#: events. Note that the click and double click events have a delay of
#: click_interval to disambiguate from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap an action map it to ``no-op``. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no-op

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: You can have kitty remove all mouse actions seen up to this point.
#: Useful, for instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell-integration to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#: Start selecting text

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#::  Select the entire line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires https://sw.kovidgoyal.net/kitty/shell-integration/ to
#::  work

#: The color used by visual bell. Set to none will fall back to
#: selection background color. If you feel that the visual bell is too
#: bright, you can set it to a darker color.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

# bell_on_tab "🔔 "

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. If you want to use leading
#: or trailing spaces surround the text with quotes. See
#: tab_title_template for how this is rendered.

#: For backwards compatibility, values of yes, y, true are converted
#: to the default bell symbol and no, n, false, none are converted to
#: the empty string.

# command_on_bell none

#: Program to run when a bell occurs. The environment variable
#: KITTY_CHILD_CMDLINE can be used to get the program running in the
#: window in which the bell occurred.

# bell_path none

#: Path to a sound file to play as the bell sound. If set to none, the
#: system default bell sound is used. Must be in a format supported by
#: the operating systems sound API, such as WAV or OGA on Linux
#: (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound)

#: }}}

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this setting when reloading config are undefined.

# window_logo_path none

#: Path to a logo image. Must be in PNG format. Relative paths are
#: interpreted relative to the kitty config directory.  The logo is
#: displayed in a corner of every kitty window. The position is
#: controlled by window_logo_position. Individual windows can be
#: configured to have different logos either using the launch function
#: or the remote-control facility.

# window_logo_position bottom-right

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_alpha 0.5

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

# resize_debounce_time 0.1

#: The time (in seconds) to wait before redrawing the screen when a
#: resize event is received. On platforms such as macOS, where the
#: operating system sends events corresponding to the start and end of
#: a resize, this number is ignored.

# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters to use for visual window selection (for
#: example for selecting a window to focus with focus_visible_window).
#: The value should be a series of unique numbers or alphabets, case
#: insensitive, from the set [0-9A-Z]. Specify your preference as a
#: string of characters.


#: Ask for confirmation when closing an OS window or a Tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the Operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with https://sw.kovidgoyal.net/kitty/shell-integration/
#: enabled, using negative values means windows sitting at a shell
#: prompt are not counted, only windows where some command is
#: currently running. Note that if you want confirmation when closing
#: individual windows, you can map the
#: https://sw.kovidgoyal.net/kitty/actions/#close-window-with-
#: confirmation action.

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts)

# tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar and
#: the second number is the margin between the tab bar and the
#: contents of the current tab.

# tab_bar_style fade

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color (see tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file
#: separator
#:     Tabs are separated by a configurable separator (see tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators
#:     (see tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <4447> for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a
#:     mapping for the https://sw.kovidgoyal.net/kitty/actions/#select-tab
#:     action which presents you with a list of tabs and allows for easy
#:     switching to a tab.

# tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, or right.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown

# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, or round.

# tab_activity_symbol none

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces surround the text with quotes. See
#: tab_title_template for how this is rendered.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.default}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:
#: {title}. Useful if you have shortcuts mapped for goto_tab N. If you
#: prefer to see the index as a superscript, use {sup.index}. In
#: addition you can use {layout_name} for the current layout name,
#: {num_windows} for the number of windows in the tab and
#: {num_window_groups} for the number of window groups (not counting
#: overlay windows) in the tab. Note that formatting is done by
#: Python's string formatting machinery, so you can use, for instance,
#: {layout_name[:2].upper()} to show only the first two letters of the
#: layout name, upper-cased. If you want to style the text, you can
#: use styling directives, for example:
#: {fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green
#: bg{fmt.bg.tab}. Similarly, for bold and italic:
#: {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.

# active_tab_title_template none

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

# tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color.

#: }}}

#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. Makes
#: it easier to read the text. Tinting is done using the current
#: background color for each window. This setting applies only if
#: background_opacity is set and transparent windows are supported or
#: background_image is set.

# dim_opacity 0.75

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #fffacd

#: The foreground and background colors for text selected with the
#: mouse. Setting both of these to none will cause a "reverse video"
#: effect for selections, where the selection will be the cell text
#: color and the text will become the cell background color. Setting
#: only selection_foreground to none will cause the foreground color
#: to be used unchanged. Note that these colors can be overridden by
#: the program running in the terminal.

# mark1_foreground black

#: Color for marks of type 1

# mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

# mark2_foreground black

#: Color for marks of type 2

# mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

# mark3_foreground black

#: Color for marks of type 3

# mark3_background #f274bc

#: Color for marks of type 3 (violet)

#: }}}

#: }}}

# close_on_child_death no

#: Close the window when the child process (shell) exits. If no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). If yes, the window
#: will close as soon as the child process exits. Note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty. Reloading the config will not affect this
#: setting.

# listen_on none

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.

# watcher

#: Path to python file which will be loaded for
#: https://sw.kovidgoyal.net/kitty/launch/#watchers. Can be specified
#: more than once to load multiple watchers. The watchers will be
#: added to every kitty window. Relative paths are resolved relative
#: to the kitty config directory. Note that reloading the config will
#: only affect windows created after the reload.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/overview/#startup-sessions in the
#: kitty documentation for details. Note that relative paths are
#: interpreted with respect to the kitty config directory. Environment
#: variables in the path are expanded. Changing this option by
#: reloading the config is not supported.

# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary read-clipboard-ask read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even one running on a remote
#: server via SSH can read your clipboard. See also
#: clipboard_max_size.

# clipboard_max_size 64

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. See also
#: clipboard_control. A value of zero means no size limit is applied.

# file_transfer_confirmation_bypass

#: A password, that can be supplied to the file transfer kitten to
#: skip the transfer confirmation prompt. This should only be used
#: when initiating transfers from trusted computers, over trusted
#: networks or encrypted transports, as it allows programs running on
#: the remote machine to read/write to the local filesystem, without
#: permission.

# macos_option_as_alt no

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique. You
#: can use the values: left, right, or both to use only the left,
#: right or both Option keys as Alt, instead. Changing this setting by
#: reloading the config is not supported.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed. By
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macOS.

# macos_window_resizable yes

#: Disable this if you want kitty top-level (OS) windows to not be
#: resizable on macOS. Changing this setting by reloading the config
#: will only affect newly created windows.

# macos_custom_beam_cursor no

#: Enable/disable custom mouse cursor for macOS that is easier to see
#: on both light and dark backgrounds. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines. Changing this setting
#: by reloading the config is not supported.

#: Keyboard shortcuts {{{

# kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

# action_alias

#: E.g. action_alias launch_tab launch --type=tab --cwd=current

#: Define aliases to avoid repeating the same options in multiple
#: mappings. Aliases can be defined for any action. Aliases are
#: expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

# kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above but, specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#: Copy to clipboard

# map kitty_mod+c copy_to_clipboard

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+c. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

# map kitty_mod+v paste_from_clipboard

#: Paste from selection

# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection

#: Pass selection to program

# map kitty_mod+o pass_selection_to_program

#::  You can also pass the contents of the current selection to any
#::  program using pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program, for
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}


#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

# map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Use for
#::  the output of things like: ls -1

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.


#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen

#: Toggle maximized

# map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

#: Edit config file

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window/tab/overlay/os_window to
#::  control kitty using commands.

#: Increase background opacity

# map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

# map kitty_mod+a>l set_background_opacity -0.1

#: Reset background opacity

# map kitty_mod+a>d set_background_opacity default

#::  If you want to operate on all windows instead of just the current
#::  one, use all instead of active.

#::  It is also possible to remap Ctrl+L to both scroll the current
#::  screen contents into the scrollback buffer and clear the screen,
#::  instead of just clearing the screen, for example, for ZSH add the
#::  following to ~/.zshrc:

#::  .. code-block:: sh

#::      scroll-and-clear-screen() {
#::          printf '\n%.0s' {1..$LINES}
#::          zle clear-screen
#::      }
#::      zle -N scroll-and-clear-screen
#::      bindkey '^l' scroll-and-clear-screen
