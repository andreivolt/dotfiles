#!/usr/bin/env ruby

require 'bundler/inline'

gemfile(quiet: true) do
  source :rubygems
  gem 'docopt'
  gem 'httparty'
  gem 'activesupport', require: 'active_support/all'
end

doc = <<~DOCOPT
  Usage:
    #{__FILE__} <query> [--sort=<sort>] [--tags=<tags>] [--page=<page>] [--hits-per-page=<hits>] [--before=<before>] [--after=<after>] [--time-range=<range>] [--points=<points>] [--num-comments=<comments>]
    #{__FILE__} (-h | --help)
    #{__FILE__} --version

  Options:
    -h --help                   Show this screen.
    --version                   Show version.
    --sort=<sort>               Sort results by 'relevance', 'points', 'num_comments', or 'date'. Default is 'relevance'.
    --tags=<tags>               Filter results by tags (e.g., 'story', 'comment'). Use comma for AND, parentheses for OR conditions.
    --page=<page>               Page number for results pagination [default: 0].
    --hits-per-page=<hits>      Number of results to return per page [default: 20].
    --before=<before>           Filter results to before this date (YYYY-MM-DD).
    --after=<after>             Filter results to after this date (YYYY-MM-DD).
    --time-range=<range>        Shortcut for time ranges: '24h', 'week', 'month', 'year'.
    --points=<points>           Filter results by minimum points.
    --num-comments=<comments>   Filter results by minimum number of comments.
DOCOPT

def construct_query(args)
  query_params = {
    query: args['<query>'],
    page: args['--page'],
    hitsPerPage: args['--hits-per-page']
  }

  if args['--tags']
    query_params[:tags] = args['--tags']
  end

  numeric_filters = []
  if args['--points']
    numeric_filters << "points>=#{args['--points']}"
  end

  if args['--num-comments']
    numeric_filters << "num_comments>=#{args['--num-comments']}"
  end

  unless numeric_filters.empty?
    query_params[:numericFilters] = numeric_filters.join(',')
  end

  query_params
end

def calculate_time_filters(args)
  if args['--before'] || args['--after']
    before = args['--before'] ? Date.parse(args['--before']).to_time.to_i : nil
    after = args['--after'] ? Date.parse(args['--after']).to_time.to_i : Time.now.to_i
    return "created_at_i<#{before},created_at_i>#{after}" if before
    "created_at_i>#{after}"
  elsif args['--time-range']
    case args['--time-range']
    when '24h'
      "created_at_i>#{24.hours.ago.to_i}"
    when 'week'
      "created_at_i>#{1.week.ago.to_i}"
    when 'month'
      "created_at_i>#{1.month.ago.to_i}"
    when 'year'
      "created_at_i>#{1.year.ago.to_i}"
    end
  end
end

begin
  args = Docopt::docopt(doc, version: '1.0.0')
  query_params = construct_query(args)
  time_filter = calculate_time_filters(args)
  query_params[:numericFilters] = "#{query_params[:numericFilters]},#{time_filter}" if time_filter

  base_url = args['--sort'] == 'date' ? 'http://hn.algolia.com/api/v1/search_by_date' : 'http://hn.algolia.com/api/v1/search'

  response = HTTParty.get(base_url, query: query_params)
  puts JSON.pretty_generate(JSON.parse(response.body))
rescue Docopt::Exit => e
  abort e.message
end
