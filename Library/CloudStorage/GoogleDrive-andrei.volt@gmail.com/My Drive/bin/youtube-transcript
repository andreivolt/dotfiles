#!/usr/bin/env -S uv run --quiet --script --with youtube_transcript_api
import sys
import re
from urllib.parse import urlparse, parse_qs
from youtube_transcript_api import YouTubeTranscriptApi

def get_video_id(url_or_id):
    if re.match(r'[a-zA-Z0-9_-]{11}$', url_or_id):
        return url_or_id
    else:
        parsed_url = urlparse(url_or_id)
        query_params = parse_qs(parsed_url.query)
        return query_params.get('v', [])[0]

def main():
    if len(sys.argv) < 2:
        print("Error: No YouTube URL or video ID provided.")
        sys.exit(1)
    try:
        video_id = get_video_id(sys.argv[1])

        # Try to get English transcript first
        try:
            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
            text = ' '.join([entry['text'] for entry in transcript])
        except:
            # If English transcript is not available, get list of available transcripts
            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
            
            # Try to get the first auto-generated transcript available
            generated_transcripts = [t for t in transcript_list if t.is_generated]
            if generated_transcripts:
                # Convert to dictionary format expected by the join operation
                transcript_data = generated_transcripts[0].fetch()
                text = ' '.join([snippet.text for snippet in transcript_data.snippets])
            else:
                # If no auto-generated transcript, try any available transcript
                available_transcript = next(iter(transcript_list), None)
                if available_transcript:
                    transcript_data = available_transcript.fetch()
                    text = ' '.join([snippet.text for snippet in transcript_data.snippets])
                else:
                    raise Exception("No transcripts found for this video")

        print(text)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main()
