#!/usr/bin/env -S deno run --allow-read --allow-net

/**
 * cssq.js
 * 
 * A CLI tool to query HTML using CSS selectors, powered by css-select.
 * 
 * Usage:
 *   cssq [file] --selector <selector> [options]
 * 
 * Options:
 *   -s, --selector <selector>    CSS selector to apply (required)
 *   -a, --attribute <attribute>  Extract a specific attribute from matched elements
 *   -t, --text                   Extract text content from matched elements
 *   -h, --html                   Output the outer HTML of matched elements (default)
 *   --test                       Run the built-in test case
 */

import { parse as parseArgs } from "https://deno.land/std@0.201.0/flags/mod.ts";
import { DOMParser } from "https://deno.land/x/deno_dom@v0.1.38/deno-dom-wasm.ts";
import { selectAll } from "https://esm.sh/css-select@5.1.0";
import { getOuterHTML, getText } from "https://esm.sh/domutils@3.1.0";

// Parse command-line arguments
const args = parseArgs(Deno.args, {
  alias: {
    s: "selector",
    a: "attribute",
    t: "text",
    h: "html",
    V: "version",
    v: "version",
    help: "help",
  },
  boolean: ["text", "html", "help", "version", "test"],
  string: ["selector", "attribute"],
  default: {
    html: true,
  },
});

// Display help message
if (args.help) {
  console.log(`
Usage:
  cssq [file] --selector <selector> [options]

Options:
  -s, --selector <selector>    CSS selector to apply (required)
  -a, --attribute <attribute>  Extract a specific attribute from matched elements
  -t, --text                   Extract text content from matched elements
  -h, --html                   Output the outer HTML of matched elements (default)
  -V, --version                Show version number
  --test                       Run the built-in test case
`);
  Deno.exit(0);
}

// Display version
if (args.version) {
  console.log("cssq v1.0.0");
  Deno.exit(0);
}

// Validate selector option
if (!args.selector && !args.test) {
  console.error("Error: --selector (-s) option is required.");
  Deno.exit(1);
}

const selector = args.selector;
const attribute = args.attribute;
const extractText = args.text;
const outputHTML = args.html;

// Function to read HTML input
async function readHTML(source) {
  if (!source) {
    // Read from stdin
    const decoder = new TextDecoder();
    const stdinContent = await Deno.readAll(Deno.stdin);
    return decoder.decode(stdinContent);
  }

  if (source.startsWith("http://") || source.startsWith("https://")) {
    // Fetch HTML from URL
    const response = await fetch(source);
    return await response.text();
  }

  // Read from file
  try {
    return await Deno.readTextFile(source);
  } catch (error) {
    console.error(`Error reading file "${source}": ${error.message}`);
    Deno.exit(1);
  }
}

// Function to process and output matched elements
function processMatches(matches) {
  if (matches.length === 0) {
    console.error("No matches found.");
    Deno.exit(0);
  }

  for (const elem of matches) {
    if (attribute) {
      const attrValue = elem.attribs[attribute];
      if (attrValue !== undefined) {
        console.log(attrValue);
      } else {
        console.error(`Element does not have attribute "${attribute}".`);
      }
    } else if (extractText) {
      console.log(getText(elem));
    } else {
      // Default to outer HTML
      console.log(getOuterHTML(elem));
    }
  }
}

// Main execution
async function main(html, selector) {
  const parser = new DOMParser();
  const document = parser.parseFromString(html, "text/html");
  
  if (!document) {
    console.error("Failed to parse HTML.");
    Deno.exit(1);
  }

  try {
    const matches = selectAll(selector, document);
    processMatches(matches);
  } catch (error) {
    console.error(`Error applying selector: ${error.message}`);
    Deno.exit(1);
  }
}

// Test case
if (args.test) {
  const testHTML = `
<!doctype html>
<html>
<head>
    <title>Example Domain</title>
</head>
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
  `;
  
  console.log("Running test case with selector 'div:has(h1)'");
  await main(testHTML, "div:has(h1)");
} else {
  const source = args._[0];
  const html = await readHTML(source);
  await main(html, selector);
}
