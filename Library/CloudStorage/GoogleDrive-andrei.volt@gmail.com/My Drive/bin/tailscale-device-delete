#!/usr/bin/env ruby

# Use bundler inline to manage dependencies (quietly)
$stderr = File.open(File::NULL, "w") # Suppress stderr output
require 'bundler/inline'

gemfile(quiet: true) do
  source 'https://rubygems.org'
  gem 'time_difference'
end
$stderr = STDERR # Restore stderr

require 'json'
require 'net/http'
require 'uri'
require 'base64'
require 'open3'
require 'time'
require 'time_difference'

# Check for fzf
unless system("which fzf > /dev/null 2>&1")
  puts "Error: fzf is not installed. Please install it first."
  exit 1
end

# Environment variables
auth_key = ENV['TAILSCALE_API_KEY']
tailscale_org = ENV['TAILSCALE_ORG']
tailscale_net = ENV['TAILSCALE_NET']

if auth_key.nil? || tailscale_org.nil? || tailscale_net.nil?
  puts "Error: Required environment variables not set."
  puts "Please set TAILSCALE_API_KEY, TAILSCALE_ORG, and TAILSCALE_NET."
  exit 1
end

auth = "#{auth_key}:"
api_base_url = "https://api.tailscale.com/api/v2"

# Function to make API requests
def api_request(url, auth, method = 'GET', body = nil)
  uri = URI(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = case method
            when 'GET'
              Net::HTTP::Get.new(uri)
            when 'DELETE'
              Net::HTTP::Delete.new(uri)
            else
              raise "Unsupported HTTP method: #{method}"
            end

  # Set the Authorization header directly with Base64 encoding
  credentials = Base64.strict_encode64(auth)
  request['Authorization'] = "Basic #{credentials}"
  
  # Add standard headers
  request['Content-Type'] = 'application/json'
  request['Accept'] = 'application/json'
  
  request.body = body if body

  response = http.request(request)
  
  [response.code.to_i, response.body]
end

# Get all devices
status_code, response_body = api_request("#{api_base_url}/tailnet/#{tailscale_org}/devices", auth)

if status_code != 200
  puts "Error: Failed to fetch devices. HTTP Status Code: #{status_code}"
  exit 1
end

devices = JSON.parse(response_body)['devices']

if devices.empty?
  puts "No devices found."
  exit 0
end

# Helper function to format time in a human-friendly way
def time_ago_in_words(time)
  now = Time.now
  diff = TimeDifference.between(time, now)
  
  if diff.in_seconds < 60
    "just now"
  elsif diff.in_minutes < 60
    minutes = diff.in_minutes.to_i
    "#{minutes} #{minutes == 1 ? 'minute' : 'minutes'} ago"
  elsif diff.in_hours < 24
    hours = diff.in_hours.to_i
    "#{hours} #{hours == 1 ? 'hour' : 'hours'} ago"
  elsif diff.in_days < 30
    days = diff.in_days.to_i
    "#{days} #{days == 1 ? 'day' : 'days'} ago"
  elsif diff.in_months < 12
    months = diff.in_months.to_i
    "#{months} #{months == 1 ? 'month' : 'months'} ago"
  else
    years = diff.in_years.to_i
    "#{years} #{years == 1 ? 'year' : 'years'} ago"
  end
end

# Prepare device list for fzf with last seen date
device_list = devices.map do |device| 
  last_seen = if device['lastSeen']
    begin
      # Handle different time formats
      time = if device['lastSeen'].is_a?(String)
        if device['lastSeen'] =~ /^\d+$/
          # It's a numeric string (Unix timestamp)
          Time.at(Integer(device['lastSeen']))
        else
          # It's likely an ISO8601 formatted date string
          Time.parse(device['lastSeen'])
        end
      else
        # It's already a number
        Time.at(device['lastSeen'])
      end
      
      # Format the time in a human-friendly way
      time_ago_in_words(time)
    rescue => e
      # If conversion fails, use a simple placeholder
      "unknown"
    end
  else
    'Never'
  end
  "#{device['name']} - Last seen: #{last_seen} (#{device['id']})"
end

# Use fzf to select devices
selected_devices, stderr, status = Open3.capture3('fzf --multi --header="Select devices to delete (TAB to select multiple, ENTER to confirm)"', stdin_data: device_list.join("\n"))

if !status.success? || selected_devices.strip.empty?
  puts "No devices selected or fzf error occurred."
  exit 1
end

# Process selected devices
selected_devices.strip.split("\n").each do |device_line|
  if match = device_line.match(/^(.*) - Last seen: .* \((.*)\)$/)
    device_name, device_id = match.captures
  else
    # Fallback in case the regex doesn't match
    puts "Error: Could not parse device line: #{device_line}"
    next
  end
  
  puts "Deleting device: #{device_name}..."
  status_code, _ = api_request("#{api_base_url}/device/#{device_id}", auth, 'DELETE')
  
  if status_code == 200
    puts "✓ Device '#{device_name}' deleted successfully."
  else
    puts "✗ Error: Failed to delete device '#{device_name}'. HTTP Status Code: #{status_code}"
  end
end