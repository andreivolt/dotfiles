#!/usr/bin/env ruby

require 'fileutils'
require 'tmpdir'
require 'find'
require 'pathname'

require 'bundler/inline'

gemfile(quiet: true) do
  source 'https://rubygems.org'
  gem 'tty-tree'
end

def is_text_file?(file_path)
  mime_type = `file --mime --brief "#{file_path}"`.chomp
  mime_type.start_with?('text/')
end

def build_tree(paths, common_root)
  tree = {}
  paths.each do |path|
    relative_path = Pathname.new(path).relative_path_from(common_root).to_s
    parts = relative_path.split('/')
    current = tree
    parts.each do |part|
      current[part] ||= {}
      current = current[part]
    end
  end
  tree
end

def print_paths(paths, commit_sha = nil)
  common_root = Pathname.new(paths.first).ascend.find { |path|
    paths.all? { |file_path| Pathname.new(file_path).ascend.include?(path) }
  }

  puts "################################### Tree: ###################################"
  tree = build_tree(paths, common_root)
  puts TTY::Tree.new(tree).render
  puts

  if File.exist?("#{common_root}/README.md") && paths.include?("#{common_root}/README.md")
    puts "---------- README.md ----------"
    puts File.read("#{common_root}/README.md")
    puts
  end

  puts "################################### Files: ###################################"
  paths.each do |path|
    if File.file?(path) && is_text_file?(path)
      filename = Pathname.new(path).relative_path_from(common_root).to_s
      puts "---------- #{filename} ----------"
      puts File.read(path)
      puts
    end
  end
end

if ARGV.empty?
  abort "Usage: #{$PROGRAM_NAME} <github_url> | #{$PROGRAM_NAME} <path1> [path2 ...]"
end

input_path = ARGV[0]

if input_path.match?(/^https:\/\/github.com\/[^\/]+\/[^\/]+(?:\/tree\/)?([^\/]*)?$/)
  repo_url = input_path.sub(/\/tree\/.*$/, '')
  commit_sha = Regexp.last_match(1)
  Dir.mktmpdir do |tmpdir|
    system("git clone '#{repo_url}' '#{tmpdir}'")
    repo_name = File.basename(repo_url, '.git')
    print_paths(Dir.glob("#{tmpdir}/**/*"), commit_sha)
  end
else
  paths = ARGV.select { |path| File.file?(path) || File.directory?(path) }
  print_paths(paths)
end
