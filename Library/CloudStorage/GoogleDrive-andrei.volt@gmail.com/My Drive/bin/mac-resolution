#!/usr/bin/env ruby

require 'bundler/inline'

$VERBOSE = nil
gemfile(false, quiet: true) do
  source :rubygems
  gem 'tty-prompt'
end
$VERBOSE = false

displayplacer_output = `displayplacer list`

initial_res_command = displayplacer_output.lines.last.chomp
screen_id = displayplacer_output.lines.find { |line| line.start_with?('Persistent screen id:') }.split(':').last.strip

resolutions = displayplacer_output.lines
  .select { |line| line.match?(/^ *mode \d+:/) && line.include?('scaling:on') }
  .flat_map { |line|
    parts = line.split
    resolution = parts[2].split(':')[1]
    width, height = resolution.split('x').map(&:to_i)
    ["#{width}x#{height}"]
  }
  .sort_by { |res| res.split('x').map(&:to_i).reverse }
  .reverse
  .uniq { |res| res.split('x')[0] }

apply_resolution = lambda do |selected_resolution|
  command =
    if selected_resolution
      parts = selected_resolution.split('x')
      "displayplacer 'id:#{screen_id} res:#{selected_resolution} hz:60 enabled:true scaling:on origin:(0,0) degree:0'"
    else
      initial_res_command
    end
  system(command)
end

prompt = TTY::Prompt.new
prompt.on(:keypress) do |event|
  if event.value == "j"
    prompt.trigger(:keydown)
  end

  if event.value == "k" || event.key.name == :back_tab
    prompt.trigger(:keyup)
  end
end

selected_resolution = prompt.select("Select a resolution:", resolutions, cycle: true)
apply_resolution.call(selected_resolution)
