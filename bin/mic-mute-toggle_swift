#!/usr/bin/env scriptisto

// scriptisto-begin
// script_src: script.swift
// build_cmd: swiftc -O script.swift -o script
// scriptisto-end

import AVFoundation
import Foundation

func toggleDefaultInputDeviceMute() {
    var defaultInputDeviceID = AudioDeviceID(0)
    var propertySize = UInt32(MemoryLayout<AudioDeviceID>.size)

    var propertyAddress = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDefaultInputDevice,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)

    let status = AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject),
        &propertyAddress,
        0,
        nil,
        &propertySize,
        &defaultInputDeviceID)

    var mute: UInt32 = 0
    propertySize = UInt32(MemoryLayout<UInt32>.size)

    var mutePropertyAddress = AudioObjectPropertyAddress(
        mSelector: kAudioDevicePropertyMute,
        mScope: kAudioDevicePropertyScopeInput,
        mElement: kAudioObjectPropertyElementMain)

    let getMuteStatus = AudioObjectGetPropertyData(defaultInputDeviceID,
        &mutePropertyAddress,
        0,
        nil,
        &propertySize,
        &mute)

    var newMuteValue: UInt32 = mute == 0 ? 1 : 0
    print("\(newMuteValue == 0 ? "unmuted" : "muted")")

    let setMuteStatus = AudioObjectSetPropertyData(defaultInputDeviceID,
        &mutePropertyAddress,
        0,
        nil,
        propertySize,
        &newMuteValue)

    let title = "Microphone Mute"
    let message = newMuteValue == 0 ? "Microphone is unmuted" : "Microphone is muted"
    let command = "terminal-notifier -title \"\(title)\" -message \"\(message)\""

    let task = Process()
    task.launchPath = "/bin/bash"
    task.arguments = ["-c", command]
    task.launch()
    task.waitUntilExit()
}

toggleDefaultInputDeviceMute()
