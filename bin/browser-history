#!/usr/bin/env -S uv run --quiet --script
# /// script
# dependencies = [
#     "wcwidth>=0.2",  # Terminal width calculation for Unicode
# ]
# ///

import sqlite3
import os
import sys
import tempfile
import shutil
import argparse
from datetime import datetime, timedelta

from wcwidth import wcswidth, wcwidth

def get_chrome_history():
    """Extract Chrome history"""
    if sys.platform == "darwin":
        profile_path = os.path.expanduser("~/Library/Application Support/Google/Chrome/Default")
    elif sys.platform.startswith("linux"):
        profile_path = os.path.expanduser("~/.config/google-chrome/Default")
    else:
        return []
    
    history_file = os.path.join(profile_path, "History")
    if not os.path.exists(history_file):
        return []
    
    # Copy to temp file since Chrome may have it locked
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        shutil.copy2(history_file, tmp.name)
        tmp_path = tmp.name
    
    try:
        conn = sqlite3.connect(f"file:{tmp_path}?immutable=1", uri=True)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT 
                datetime(last_visit_time/1000000-11644473600, 'unixepoch'),
                url,
                title,
                visit_count
            FROM urls 
            ORDER BY last_visit_time ASC
        """)
        
        results = []
        for row in cursor.fetchall():
            timestamp, url, title, visit_count = row
            title = title or ""
            results.append((timestamp, "chrome", url, title))
        
        conn.close()
        return results
    finally:
        os.unlink(tmp_path)

def get_firefox_history():
    """Extract Firefox history"""
    # Hardcoded Firefox places file
    source_file = os.path.expanduser("~/drive/firefox-places.sqlite")
    
    if not os.path.exists(source_file):
        return []
    
    # Copy to temp file
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        shutil.copy2(source_file, tmp.name)
        tmp_path = tmp.name
    
    try:
        conn = sqlite3.connect(tmp_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT 
                datetime(h.visit_date/1000000,'unixepoch'),
                p.url,
                p.title
            FROM 
                moz_historyvisits AS h,
                moz_places AS p
            WHERE 
                p.id == h.place_id
            ORDER BY 
                h.visit_date ASC
        """)
        
        results = []
        for row in cursor.fetchall():
            timestamp, url, title = row
            title = title or ""
            results.append((timestamp, "firefox", url, title))
        
        conn.close()
        return results
    finally:
        os.unlink(tmp_path)

def display_width(text):
    """Calculate display width of text using wcwidth library"""
    width = wcswidth(text)
    return width if width is not None else len(text)

def truncate_for_terminal(text, max_width):
    """Truncate text to fit terminal width using wcwidth"""
    if display_width(text) <= max_width:
        return text
    
    truncated = ""
    current_width = 0
    
    for char in text:
        char_width = wcwidth(char)
        if char_width is None:
            char_width = 1  # Control characters
        
        if current_width + char_width + 3 > max_width:  # +3 for "..."
            break
        
        truncated += char
        current_width += char_width
    
    return truncated + "..."

def parse_date(date_str):
    """Parse date string in various formats"""
    if not date_str:
        return None
    
    # Try different date formats
    formats = [
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d %H:%M',
        '%Y-%m-%d',
    ]
    
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue
    
    raise ValueError(f"Invalid date format: {date_str}. Use YYYY-MM-DD or YYYY-MM-DD HH:MM:SS")

def filter_by_date(history, since_date, until_date):
    """Filter history by date range"""
    filtered = []
    
    for timestamp, browser, url, title in history:
        if not timestamp:
            continue
            
        try:
            # Parse the timestamp from the history
            item_date = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            continue
        
        # Apply date filters
        if since_date and item_date < since_date:
            continue
        if until_date and item_date > until_date:
            continue
            
        filtered.append((timestamp, browser, url, title))
    
    return filtered

def main():
    parser = argparse.ArgumentParser(description='Merge Chrome and Firefox browser history')
    parser.add_argument('--browser', '-b', choices=['chrome', 'firefox'], 
                       help='Which browser history to show (default: both)')
    parser.add_argument('--last', '-n', type=int, 
                       help='Show only the last N items')
    parser.add_argument('--since', '-s', 
                       help='Show items since date (YYYY-MM-DD or YYYY-MM-DD HH:MM:SS)')
    parser.add_argument('--until', '-u', 
                       help='Show items until date (YYYY-MM-DD or YYYY-MM-DD HH:MM:SS)')
    parser.add_argument('--today', '-t', action='store_true',
                       help='Show items from today only')
    parser.add_argument('--yesterday', '-y', action='store_true',
                       help='Show items from yesterday only')
    parser.add_argument('--week', '-w', action='store_true',
                       help='Show items from the last 7 days')
    parser.add_argument('--month', '-m', action='store_true',
                       help='Show items from the last 30 days')
    args = parser.parse_args()
    
    # Get history based on browser selection
    all_history = []
    if args.browser == 'chrome':
        chrome_history = get_chrome_history()
        all_history.extend(chrome_history)
    elif args.browser == 'firefox':
        firefox_history = get_firefox_history()
        all_history.extend(firefox_history)
    else:
        # Default: both browsers
        chrome_history = get_chrome_history()
        firefox_history = get_firefox_history()
        all_history.extend(chrome_history)
        all_history.extend(firefox_history)
    
    # Sort by timestamp
    all_history.sort(key=lambda x: x[0] if x[0] else "")
    
    # Apply date filters
    since_date = parse_date(args.since)
    until_date = parse_date(args.until)
    
    # Handle convenience date filters
    now = datetime.now()
    if args.today:
        since_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        until_date = now.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif args.yesterday:
        yesterday = now - timedelta(days=1)
        since_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
        until_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif args.week:
        since_date = now - timedelta(days=7)
    elif args.month:
        since_date = now - timedelta(days=30)
    
    if since_date or until_date:
        all_history = filter_by_date(all_history, since_date, until_date)
    
    # Apply last N filter
    if args.last:
        all_history = all_history[-args.last:]
    
    # Check if output is being piped
    is_piped = not sys.stdout.isatty()
    
    # Get terminal width for formatting
    if not is_piped:
        try:
            terminal_width = os.get_terminal_size().columns
        except:
            terminal_width = 80
    
    # Output format
    for timestamp, browser, url, title in all_history:
        # Clean title - remove newlines and pipes
        clean_title = title.replace("\n", " ").replace("\r", " ").replace("|", "").strip()
        
        if is_piped:
            # Full output when piped (keep browser for filtering)
            print(f"{timestamp}|{browser}|{url}|{clean_title}")
        else:
            # Aligned column output for terminal (no browser column)
            # Format: timestamp(19) title(40) url(remaining)
            timestamp_part = timestamp[:19].ljust(19)
            
            # Calculate remaining space for title and URL
            remaining_width = terminal_width - 19 - 3  # 3 for separators
            title_width = min(40, remaining_width // 2)
            url_width = remaining_width - title_width - 1
            
            title_part = truncate_for_terminal(clean_title, title_width)
            url_part = truncate_for_terminal(url, url_width)
            
            # Pad title to align properly, accounting for display width
            title_display_width = display_width(title_part)
            title_padding = title_width - title_display_width
            title_part_padded = title_part + " " * title_padding
            
            print(f"{timestamp_part} {title_part_padded} {url_part}")

if __name__ == "__main__":
    main()