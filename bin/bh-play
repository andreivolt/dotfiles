#!/usr/bin/env python3

import sys
import json
import subprocess
import argparse
import re
import time
import atexit

parser = argparse.ArgumentParser(description="Play audio through BlackHole")
parser.add_argument("-m", "--monitor", action="store_true",
                    help="Use BH-Monitor for output (speakers + BlackHole)")
parser.add_argument("audiofile", nargs="?", help="Audio file to play")
args = parser.parse_args()

is_stdin = not sys.stdin.isatty() and not args.audiofile

output_name = "BH-Monitor" if args.monitor else "BlackHole 2ch"

original_output = subprocess.run("bunx macos-audio-devices output get --json",
                               shell=True, capture_output=True, text=True)
original_output_id = json.loads(original_output.stdout.strip())["id"]

devices_output = subprocess.run("bunx macos-audio-devices list --json",
                              shell=True, capture_output=True, text=True)
devices = json.loads(devices_output.stdout.strip())

output_device = next((d for d in devices if d["name"] == output_name), None)
input_device = next((d for d in devices if d["name"] == "BlackHole 2ch"), None)

if not output_device:
    print(f"Output device '{output_name}' not found", file=sys.stderr)
    sys.exit(1)

if not input_device:
    print("Input device 'BlackHole 2ch' not found", file=sys.stderr)
    sys.exit(1)

output_id = output_device["id"]
input_id = input_device["id"]
output_uid = output_device["uid"]

atexit.register(lambda: subprocess.run(f"bunx macos-audio-devices output set {original_output_id}", shell=True))

subprocess.run(f"bunx macos-audio-devices output set {output_id}", shell=True)
subprocess.run(f"bunx macos-audio-devices input set {input_id}", shell=True)
subprocess.run("osascript -e 'set volume input volume 100'", shell=True)

ffmpeg_output = subprocess.run(
    "ffmpeg -f lavfi -i anullsrc=channel_layout=stereo:r=48000 -t 0.001 -f audiotoolbox -list_devices true - 2>&1",
    shell=True, capture_output=True, text=True
)

matches = re.findall(r'\[AudioToolbox.*?\] \[(\d+)\].*' + re.escape(output_name), ffmpeg_output.stdout)
device_index = matches[0] if matches else None

print(f"Using device: {output_name} with ffmpeg index: {device_index}", file=sys.stderr)

if args.audiofile or is_stdin:
    input_source = args.audiofile if args.audiofile else "-"
    cmd = [
        "ffmpeg", "-re", "-i", input_source,
        "-af", "loudnorm=I=-14:TP=-1.5:LRA=11,alimiter=limit=0.97:level=disabled",
        "-ac", "2", "-ar", "48000", "-f", "audiotoolbox", "-audio_device_index", device_index, "-"
    ]
    try:
        mpv_cmd = [
            "mpv", "--no-video", f"--audio-device=coreaudio/{output_uid}",
            "--af=loudnorm=I=-14:TP=-1.5:LRA=11", input_source
        ]
        subprocess.run(mpv_cmd)
    finally:
        time.sleep(0.1)
else:
    print(f"Routing system audio through {output_name}. Press Ctrl+C to stop.", file=sys.stderr)
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
