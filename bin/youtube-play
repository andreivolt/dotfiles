#!/usr/bin/env -S uv run --script --quiet
"""Stream YouTube videos and playlists through media players."""
# /// script
# requires-python = ">=3.9"
# dependencies = [
#   "sh",
#   "yt-dlp",
# ]
# ///


import yt_dlp
import random
import argparse
import sys
import tempfile
import os
import time
from typing import List, Dict, Optional
from sh import mpv
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

def parse_duration(duration_str: str) -> tuple[Optional[float], Optional[float]]:
    """Parse duration string like '5-10' or '<10' or '>5' into min/max seconds."""
    duration_str = duration_str.strip()

    if '-' in duration_str:
        # Range: "5-10"
        parts = duration_str.split('-')
        if len(parts) == 2:
            try:
                min_dur = float(parts[0]) * 60
                max_dur = float(parts[1]) * 60
                return min_dur, max_dur
            except ValueError:
                pass
    elif duration_str.startswith('<'):
        # Max only: "<10"
        try:
            max_dur = float(duration_str[1:]) * 60
            return None, max_dur
        except ValueError:
            pass
    elif duration_str.startswith('>'):
        # Min only: ">5"
        try:
            min_dur = float(duration_str[1:]) * 60
            return min_dur, None
        except ValueError:
            pass

    raise ValueError(f"Invalid duration format: {duration_str}")

def extract_video_info(entry: Dict, ydl_opts: Dict) -> Optional[Dict]:
    """Extract video information from a search entry."""
    if not entry:
        return None

    video_id = entry.get('id')
    duration = entry.get('duration', 0)

    # Skip if no duration info (might be live stream)
    if not duration:
        return None

    # Ensure duration is numeric
    try:
        duration = float(duration)
    except (TypeError, ValueError):
        return None

    # For more detailed info, we could extract full info here
    # but it's much slower, so we'll use the flat extraction data
    return {
        'url': f"https://youtube.com/watch?v={video_id}",
        'title': entry.get('title', 'Unknown'),
        'duration': duration,
        'uploader': entry.get('uploader', 'Unknown')
    }

def is_channel_query(query: str) -> bool:
    """Check if query is a channel URL or @username."""
    if query.startswith('@'):
        return True
    if 'youtube.com/channel/' in query:
        return True
    if 'youtube.com/c/' in query:
        return True
    if 'youtube.com/@' in query:
        return True
    if 'youtube.com/user/' in query:
        return True
    return False

def extract_channel_identifier(url: str) -> str:
    """Extract channel identifier from various YouTube URL formats."""
    import re

    # If it's just @username, return as is
    if url.startswith('@') and 'youtube.com' not in url:
        return url

    # Pattern to match various YouTube channel URL formats
    patterns = [
        r'youtube\.com/@([^/]+)',           # @username format
        r'youtube\.com/channel/([^/]+)',    # channel ID format
        r'youtube\.com/c/([^/]+)',          # custom URL format
        r'youtube\.com/user/([^/]+)',       # legacy user format
    ]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            identifier = match.group(1)
            # For @username format, include the @
            if '/@' in url:
                return f"@{identifier}"
            # For channel ID format, return full channel URL
            elif '/channel/' in url:
                return f"https://www.youtube.com/channel/{identifier}"
            # For other formats, construct @username URL if possible
            else:
                return f"https://www.youtube.com/c/{identifier}"

    # If no pattern matches, return original URL
    return url

def search_youtube(query: str, max_results: int = 200, max_threads: int = 0) -> List[Dict]:
    """Search YouTube and return video information using yt-dlp library with parallel processing."""
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'extract_flat': 'in_playlist',
        'force_generic_extractor': False,
        'default_search': 'ytsearch',
        'playlistend': max_results,
    }

    videos = []
    entries_to_process = []

    # Check if this is a channel query
    is_channel = is_channel_query(query)

    # First, get all entries from the search
    if is_channel:
        print(f"Fetching videos from channel...", end='', flush=True)
    else:
        print(f"Searching for videos...", end='', flush=True)

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            if is_channel:
                # For channel queries, extract the channel videos directly
                # Extract channel identifier and construct proper URL
                channel_id = extract_channel_identifier(query)

                # Convert to proper channel videos URL
                if channel_id.startswith('@'):
                    channel_url = f"https://www.youtube.com/{channel_id}/videos"
                elif channel_id.startswith('https://www.youtube.com/channel/'):
                    channel_url = f"{channel_id}/videos"
                elif channel_id.startswith('https://www.youtube.com/c/'):
                    channel_url = f"{channel_id}/videos"
                else:
                    channel_url = f"https://www.youtube.com/{channel_id}/videos"

                info = ydl.extract_info(channel_url, download=False)
            else:
                # For search queries, use ytsearch
                search_query = f"ytsearch{max_results}:{query}"
                info = ydl.extract_info(search_query, download=False)

            if 'entries' in info:
                entries_to_process = list(info['entries'])

        except Exception as e:
            print(f"\nError searching YouTube: {e}", file=sys.stderr)
            sys.exit(1)

    if not entries_to_process:
        return videos

    # Process entries in parallel
    print(f"\rProcessing {len(entries_to_process)} search results...", end='', flush=True)

    # Use ThreadPoolExecutor for parallel processing
    if max_threads <= 0:
        max_workers = min(32, len(entries_to_process))  # Auto: up to 32 threads
    else:
        max_workers = min(max_threads, len(entries_to_process))  # User-specified
    processed = 0
    lock = threading.Lock()

    def update_progress():
        nonlocal processed
        with lock:
            processed += 1
            print(f"\rProcessing {processed}/{len(entries_to_process)} videos...", end='', flush=True)

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # Submit all tasks with their original index
        future_to_index = {
            executor.submit(extract_video_info, entry, ydl_opts): i
            for i, entry in enumerate(entries_to_process)
        }

        # Collect results maintaining order
        results = [None] * len(entries_to_process)

        for future in as_completed(future_to_index):
            try:
                result = future.result()
                if result:
                    index = future_to_index[future]
                    results[index] = result
                update_progress()
            except Exception as e:
                # Skip failed extractions
                update_progress()
                continue

        # Filter out None values and add to videos list
        videos = [r for r in results if r is not None]

    print(f"\rFound {len(videos)} valid videos.                    ")
    return videos

def filter_by_duration(videos: List[Dict], min_duration: Optional[float], max_duration: Optional[float]) -> List[Dict]:
    """Filter videos by duration criteria."""
    filtered = []

    for video in videos:
        duration = video.get('duration', 0)

        if min_duration is not None and duration < min_duration:
            continue
        if max_duration is not None and duration > max_duration:
            continue

        filtered.append(video)

    return filtered

def format_duration(seconds: float) -> str:
    """Convert seconds to MM:SS or HH:MM:SS format."""
    # Convert to int to handle float durations
    total_seconds = int(seconds)
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    secs = total_seconds % 60

    if hours > 0:
        return f"{hours}:{minutes:02d}:{secs:02d}"
    else:
        return f"{minutes}:{secs:02d}"

def sanitize_for_playlist(text: str) -> str:
    """Sanitize text for M3U playlist format.

    Note: We're using a simple implementation here. For more complex M3U needs,
    consider using the 'm3u8' library, though it's mainly for HLS playlists.
    """
    # Handle None values
    if text is None:
        return ""

    # Convert to string if not already
    text = str(text)

    # Remove newlines, carriage returns, and other problematic characters
    text = text.replace('\n', ' ').replace('\r', ' ')
    text = text.replace('\t', ' ')  # Replace tabs
    # Remove or replace other potentially problematic characters
    text = text.replace('#', '♯')  # Replace hash to avoid M3U comment confusion
    text = text.replace(',', '，')  # Replace comma with fullwidth comma to avoid EXTINF parsing issues
    # Remove any control characters
    text = ''.join(char for char in text if ord(char) >= 32 or char in '\t\n\r')
    # Clean up multiple spaces
    text = ' '.join(text.split())
    # Limit length to avoid issues
    if len(text) > 200:
        text = text[:197] + '...'
    return text.strip()

def get_best_url(video_url: str, with_video: bool = True) -> Optional[str]:
    """Extract best URL for a video."""
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'format': 'best' if with_video else 'bestaudio/best',
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(video_url, download=False)
            return info.get('url')
        except:
            return None

def play_with_mpv(videos: List[Dict], query: str, shuffle: bool = True, with_video: bool = False,
                  use_direct_urls: bool = False, max_threads: int = 0, output_file: Optional[str] = None):
    """Create a playlist and play with mpv."""
    if not videos:
        print("No videos found matching criteria.", file=sys.stderr)
        sys.exit(1)

    if shuffle:
        videos = videos.copy()
        random.shuffle(videos)

    print(f"\nPlaying {len(videos)} videos:")
    for i, video in enumerate(videos, 1):
        duration_str = format_duration(video['duration'])
        print(f"{i}. {video['title']} [{duration_str}] - {video['uploader']}")

    # Create temporary playlist file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.m3u', delete=False, encoding='utf-8') as f:
        playlist_path = f.name

        # Write extended M3U header
        f.write("#EXTM3U\n")
        f.write(f"# YouTube playlist: {query}\n")
        f.write(f"# Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"# Videos: {len(videos)}\n\n")

        if use_direct_urls:
            # Extract direct URLs for faster loading using parallel processing
            print(f"\nExtracting {'video' if with_video else 'audio'} URLs...")
            urls = [None] * len(videos)  # Pre-allocate list with correct size
            processed = 0
            lock = threading.Lock()

            def extract_and_update(index: int, video: Dict):
                nonlocal processed
                url = get_best_url(video['url'], with_video)
                urls[index] = url if url else video['url']
                with lock:
                    processed += 1
                    print(f"\rProcessing {processed}/{len(videos)}...", end='', flush=True)

            # Use ThreadPoolExecutor for parallel URL extraction
            if max_threads <= 0:
                max_workers = min(16, len(videos))  # Auto: reasonable limit for URL extraction
            else:
                max_workers = min(max_threads, len(videos))  # User-specified
            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = [
                    executor.submit(extract_and_update, i, video)
                    for i, video in enumerate(videos)
                ]
                # Wait for all to complete
                for future in futures:
                    future.result()

            print("\rExtraction complete!        ")

            # Write URLs with metadata to playlist
            for i, (url, video) in enumerate(zip(urls, videos)):
                duration = int(video['duration'])
                title = sanitize_for_playlist(video['title'])
                uploader = sanitize_for_playlist(video['uploader'])
                # Write EXTINF line - format: #EXTINF:duration,Artist - Title
                # This format is widely supported and mpv will show it properly
                display_name = f"{uploader} - {title}" if uploader and uploader != "Unknown" else title
                f.write(f"#EXTINF:{duration},{display_name}\n")
                f.write(f"{url}\n")
        else:
            # Use YouTube URLs and let mpv/yt-dlp handle extraction
            for video in videos:
                duration = int(video['duration'])
                title = sanitize_for_playlist(video['title'])
                uploader = sanitize_for_playlist(video['uploader'])
                # Write EXTINF line
                display_name = f"{uploader} - {title}" if uploader and uploader != "Unknown" else title
                f.write(f"#EXTINF:{duration},{display_name}\n")
                f.write(f"{video['url']}\n")

    try:
        # Save playlist if requested
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as out:
                with open(playlist_path, 'r', encoding='utf-8') as inp:
                    out.write(inp.read())
            print(f"\nPlaylist saved to: {output_file}")
            print(f"Play it later with: mpv {output_file}")

        # Play with mpv
        mpv_cmd = [
            'mpv',
            '--playlist=' + playlist_path,
        ]

        if not use_direct_urls:
            # Let mpv use yt-dlp for extraction
            mpv_cmd.append('--ytdl-format=bestvideo[height<=?1080]+bestaudio/best')

        if not with_video:
            mpv_cmd.append('--no-video')
            mpv_cmd.append('--force-window=no')

        # Add some useful mpv options
        mpv_cmd.extend([
            '--really-quiet',
            '--msg-level=all=error',
            '--osd-level=1',
            '--osd-duration=3000',
            '--playlist-start=0',
        ])

        mpv(mpv_cmd[1], *mpv_cmd[2:])

        # Show playlist navigation tips
        if len(videos) > 1:
            print("\nmpv playlist controls:")
            print("  F8 / F9   - Show/hide playlist")
            print("  < / >     - Previous/next track")
            print("  Enter     - Play selected item (in playlist view)")
            print("  o / O     - Show progress/time and title")
            print("  i / I     - Show statistics")
            print("  Shift+L   - Loop playlist")

    except KeyboardInterrupt:
        print("\n\nPlayback interrupted by user.")
    finally:
        # Clean up playlist file only if not saved
        if not output_file:
            try:
                os.unlink(playlist_path)
            except:
                pass

# Parse arguments
parser = argparse.ArgumentParser(description='Search YouTube and play videos in random order with mpv'
, formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('query', help='YouTube search query, channel URL, or @username')
parser.add_argument('-d', '--duration', help='Duration filter in minutes (e.g., "5-10", "<10", ">5")')
parser.add_argument('-n', '--number', type=int, default=100, help='Max results')
parser.add_argument('-s', '--no-shuffle', action='store_true', help='Do not shuffle playlist')
parser.add_argument('-a', '--audio-only', action='store_true', help='Play audio only (default plays video)')
parser.add_argument('-u', '--direct-urls', action='store_true',
                   help='Extract direct URLs before playback (slower start, smoother playback)')
parser.add_argument('-t', '--threads', type=int, default=0,
                   help='Number of threads for parallel processing (0=auto)')
parser.add_argument('-o', '--output', help='Save playlist to file (M3U format)')

args = parser.parse_args()

# Parse duration if provided
min_duration = None
max_duration = None
if args.duration:
    try:
        min_duration, max_duration = parse_duration(args.duration)
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if is_channel_query(args.query):
    print(f"Fetching videos from channel: {args.query}")
else:
    print(f"Searching YouTube for: {args.query}")
if args.duration:
    print(f"Duration filter: {args.duration} minutes")

# Search YouTube with parallelization
start_time = time.time()
videos = search_youtube(args.query,
                      max_results=min(args.number * 3, 300),
                      max_threads=args.threads)  # Get extra to account for filtering
search_time = time.time() - start_time

if search_time > 2:  # Only show timing for longer searches
    print(f"Search completed in {search_time:.1f} seconds")

# Filter by duration if specified
if min_duration is not None or max_duration is not None:
    videos = filter_by_duration(videos, min_duration, max_duration)

# Limit to requested number
videos = videos[:args.number]

# Play the videos

play_with_mpv(videos, args.query, shuffle=not args.no_shuffle, with_video=not args.audio_only,
              use_direct_urls=args.direct_urls, max_threads=args.threads,
              output_file=args.output)