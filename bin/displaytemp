#!/usr/bin/env -S uv run --script --quiet
# /// script
# dependencies = [
#   "platformdirs",
#   "sh"
# ]
# ///

import argparse
import os
import sys
from pathlib import Path
from platformdirs import user_state_dir
import sh

MAX_TEMP, MIN_TEMP, STEP = 6500, 1000, 100

def get_temp_file():
    state_dir = user_state_dir()
    return Path(state_dir) / "redshift_temp"

def read_current_temp():
    temp_file = get_temp_file()
    if temp_file.exists():
        try:
            return int(temp_file.read_text().strip())
        except (ValueError, OSError):
            pass
    return 6500

def write_temp(temp):
    temp_file = get_temp_file()
    temp_file.parent.mkdir(parents=True, exist_ok=True)
    temp_file.write_text(str(temp))

def clamp(value, min_val, max_val):
    return max(min_val, min(max_val, value))

def set_redshift_temp(temp):
    try:
        sh.pkill("redshift")
    except sh.ErrorReturnCode:
        pass
    sh.redshift("-O", str(temp), _bg=True, _out="/dev/null", _err="/dev/null")

parser = argparse.ArgumentParser(description="Control display temperature using redshift")
parser.add_argument("adjustment", help="Temperature adjustment: +, -, +/-number, or absolute temperature")

args = parser.parse_args()

current_temp = read_current_temp()
input_val = args.adjustment

if input_val == "+":
    new_temp = current_temp + STEP
elif input_val == "-":
    new_temp = current_temp - STEP
elif input_val.startswith(('+', '-')) and input_val[1:].isdigit():
    new_temp = current_temp + int(input_val)
elif input_val.isdigit():
    new_temp = int(input_val)
else:
    print(f"Invalid input. Usage: {sys.argv[0]} [+|-][<number>] or <temperature>")
    sys.exit(1)

new_temp = clamp(new_temp, MIN_TEMP, MAX_TEMP)

write_temp(new_temp)
set_redshift_temp(new_temp)
print(f"Temperature set to {new_temp}K")