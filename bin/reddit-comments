#!/usr/bin/env -S pip-run praw

import os
import praw
import argparse
import json
from urllib.parse import urlparse
from pathlib import Path
from datetime import datetime

script_path = Path(sys.argv[0] if __file__ is None else __file__).resolve().parent

def build_comment_tree(comment):
    comment_data = {
        'author': str(comment.author),
        'body': comment.body,
        'created_utc': datetime.fromtimestamp(comment.created_utc).isoformat(),
        'replies': []
    }

    if hasattr(comment, 'replies'):
        for reply in comment.replies:
            comment_data['replies'].append(build_comment_tree(reply))

    return comment_data

def print_comment_tree(comment, level=0, is_last=False):
    prefix = " " * level
    connector = '└─' if is_last else '├─'
    timestamp_iso = datetime.fromtimestamp(comment.created_utc).isoformat()
    print(f"{prefix}{connector} {comment.author} ({timestamp_iso}): {comment.body}")
    if hasattr(comment, 'replies'):
        replies = list(comment.replies)
        for i, reply in enumerate(replies):
            print_comment_tree(reply, level + 1, i == len(replies) - 1)

def get_submission_and_comment_id_from_url(url):
    parsed_url = urlparse(url)
    if 'reddit.com' in parsed_url.netloc or 'old.reddit.com' in parsed_url.netloc:
        path_segments = parsed_url.path.split('/')
        if len(path_segments) >= 6 and path_segments[3] == 'comments':
            submission_id = path_segments[4]
            comment_id = path_segments[6] if len(path_segments) >= 7 else None
            return submission_id, comment_id
    return None, None

def main():
    parser = argparse.ArgumentParser(description='Process a Reddit submission or comment URL.')
    parser.add_argument('url', help='The Reddit submission or comment URL')
    parser.add_argument('--json', action='store_true', help='Output the comment tree in JSON format')
    args = parser.parse_args()

    submission_id, comment_id = get_submission_and_comment_id_from_url(args.url)
    if not submission_id:
        print("Invalid submission or comment URL.")
        return

    reddit = praw.Reddit(
        client_id=os.getenv('REDDIT_CLIENT_ID'),
        client_secret=os.getenv('REDDIT_CLIENT_SECRET'),
        user_agent=os.getenv('_'),
        username=os.getenv('REDDIT_USERNAME'),
        password=os.getenv('REDDIT_PASSWORD')
    )

    submission = reddit.submission(id=submission_id)
    submission.comments.replace_more(limit=None)

    if comment_id:
        comment = reddit.comment(id=comment_id)
        comment.refresh()
        comments = [comment]
    else:
        comments = submission.comments

    if args.json:
        comment_tree = [build_comment_tree(comment) for comment in comments]
        print(json.dumps(comment_tree))
    else:
        for comment in comments:
            print_comment_tree(comment)

if __name__ == "__main__":
    main()
