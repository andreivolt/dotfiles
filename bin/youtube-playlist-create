#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source :rubygems
  gem 'google-apis-youtube_v3', '~> 0.1'
  gem 'ruby-openai'
end

require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'fileutils'
require 'openai'

OOB_URI = 'urn:ietf:wg:oauth:2.0:oob'.freeze
APPLICATION_NAME = 'YouTube Playlist Creator'.freeze
CONFIG_DIR = File.join(ENV['XDG_CONFIG_HOME'] || File.join(Dir.home, '.config'), 'youtube_playlist_creator')
CREDENTIALS_PATH = File.join(CONFIG_DIR, 'credentials.yaml')
SCOPE = Google::Apis::YoutubeV3::AUTH_YOUTUBE

OPENAI_API_KEY = ENV['OPENAI_API_KEY']
client = OpenAI::Client.new(access_token: OPENAI_API_KEY)

def user_credentials_for(scope)
 client_id = Google::Auth::ClientId.from_hash(
   {
     'installed' => {
       'client_id' => ENV['GOOGLE_CLIENT_ID'],
       'client_secret' => ENV['GOOGLE_CLIENT_SECRET']
     }
   }
 )

 FileUtils.mkdir_p(CONFIG_DIR)
 token_store = Google::Auth::Stores::FileTokenStore.new(file: CREDENTIALS_PATH)
 authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
 user_id = 'default'
 credentials = authorizer.get_credentials(user_id)

 if credentials.nil?
   url = authorizer.get_authorization_url(base_url: OOB_URI)
   puts "Open the following URL in your browser and authorize the application:\n#{url}"
   code = gets.chomp
   credentials = authorizer.get_and_store_credentials_from_code(user_id: user_id, code: code, base_url: OOB_URI)
 end

 credentials
end

youtube = Google::Apis::YoutubeV3::YouTubeService.new
youtube.client_options.application_name = APPLICATION_NAME
youtube.authorization = user_credentials_for(SCOPE)

playlist = Google::Apis::YoutubeV3::Playlist.new(
 snippet: Google::Apis::YoutubeV3::PlaylistSnippet.new(
   title: 'New Playlist Title',
   description: 'A private playlist created with the YouTube API'
 ),
 status: Google::Apis::YoutubeV3::PlaylistStatus.new(privacy_status: 'private')
)

new_playlist = nil

begin
 new_playlist = youtube.insert_playlist('snippet,status', playlist)
 puts "New playlist created: #{new_playlist.id}"
rescue Google::Apis::Error => e
 puts "An error occurred: #{e}"
 exit
end

video_titles = []

STDIN.each_line do |line|
  video_id = line.strip.split('watch?v=').last

  video_details = youtube.list_videos('snippet', id: video_id).items.first
  next if video_details.nil?

  video_titles << video_details.snippet.title

  playlist_item = Google::Apis::YoutubeV3::PlaylistItem.new(
    snippet: Google::Apis::YoutubeV3::PlaylistItemSnippet.new(
      playlist_id: new_playlist.id,
      resource_id: Google::Apis::YoutubeV3::ResourceId.new(kind: 'youtube#video', video_id: video_id)
    )
  )

  begin
    youtube.insert_playlist_item('snippet', playlist_item)
    puts "Added video #{video_id} to playlist"
  rescue Google::Apis::Error => e
    puts "An error occurred adding video #{video_id}: #{e}"
  end
end

response = client.chat(
  parameters: {
    messages: [
      {
        role: "user",
        content: "Suggest a very descriptive and succint name for a YouTube playlist, not editorialized, just descriptive, based on the following video titles:\n\n#{video_titles.join("\n")}"
      }
    ],
    frequency_penalty: 0,
    max_tokens: 100,
    model: "gpt-4-0125-preview",
    presence_penalty: 0,
    temperature: 0.7,
    top_p: 1
  }
)

suggested_playlist_name = response.dig('choices', 0, 'message', 'content').strip

new_playlist.snippet.title = suggested_playlist_name
# TODO https://github.com/googleapis/google-api-ruby-client/blob/98b822c1595197982109191efa3a075f5c68845c/generated/google-apis-youtube_v3/lib/google/apis/youtube_v3/service.rb#L37
youtube.update_playlist('snippet', new_playlist)
puts "Playlist title updated to: #{suggested_playlist_name}"
