#!/usr/bin/env -S uv run --quiet --script
# Claude: does youtube provide a formatted version of the tarnscript? currently it all shows up one line
# /// script
# dependencies = [
#   "youtube-transcript-api~=0.6.2",  # YouTube transcript fetching
#   "lxml",  # XML parsing support for transcripts
# ]
# ///
import sys
import re
from urllib.parse import urlparse, parse_qs
from youtube_transcript_api import YouTubeTranscriptApi
import argparse

def get_video_id(url_or_id):
    if re.match(r'[a-zA-Z0-9_-]{11}$', url_or_id):
        return url_or_id
    else:
        parsed_url = urlparse(url_or_id)
        query_params = parse_qs(parsed_url.query)
        return query_params.get('v', [])[0]

def format_timestamp(seconds):
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    if hours > 0:
        return f"{hours}:{minutes:02d}:{seconds:02d}"
    else:
        return f"{minutes}:{seconds:02d}"

def main():
    parser = argparse.ArgumentParser(description='Get YouTube video transcript')
    parser.add_argument('url', help='YouTube URL or video ID')
    parser.add_argument('--timestamps', action='store_true', help='Include timestamps')
    args = parser.parse_args()

    try:
        video_id = get_video_id(args.url)

        # Try to get English transcript first
        try:
            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
        except:
            # If English transcript is not available, get list of available transcripts
            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
            
            # Try to get the first auto-generated transcript available
            generated_transcripts = [t for t in transcript_list if t.is_generated]
            if generated_transcripts:
                transcript = generated_transcripts[0].fetch()
            else:
                # If no auto-generated transcript, try any available transcript
                available_transcript = next(iter(transcript_list), None)
                if available_transcript:
                    transcript = available_transcript.fetch()
                else:
                    raise Exception("No transcripts found for this video")

        if args.timestamps:
            for entry in transcript:
                # Handle both dict and object access patterns
                if hasattr(entry, 'start'):
                    timestamp = format_timestamp(entry.start)
                    text = entry.text
                else:
                    timestamp = format_timestamp(entry['start'])
                    text = entry['text']
                print(f"[{timestamp}] {text}")
        else:
            # Handle both dict and object access patterns
            if transcript and hasattr(transcript[0], 'text'):
                text = ' '.join([entry.text for entry in transcript])
            else:
                text = ' '.join([entry['text'] for entry in transcript])
            print(text)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main()
