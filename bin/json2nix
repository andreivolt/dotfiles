#!/usr/bin/env python3
"""Converts JSON objects into nix (hackishly)."""

import sys
import json
import re
import argparse

INDENT = " " * 2


def strip_comments(json_text):
    pattern = re.compile(r"""
        # match everything in quotes including escaped quotes
        (?P<quoted>\"(?:\\\"|[^\"])*?\")|
        # match '//' outside of quotes followed by any characters

        (?P<comment>//.*)
    """, re.VERBOSE)

    def replace(match):
        if match.group('comment'):
            return ''
        else:
            return match.group(0)

    return re.sub(pattern, replace, json_text)

def indent(s):
    return "\n".join(INDENT + i for i in s.split("\n"))

def nix_stringify(s):
    if "${" in s:
        s = s.replace("${", "\${")
    if "\n" in s:
        return "''{}''".format(s.replace("''", "''''"))
    return f"\"{s}\""


def sanitize_key(s):
    if s and s.isalnum() and not s[0].isdigit():
        return s
    return nix_stringify(s)


def flatten_obj_item(k, v):
    keys = [k]
    val = v
    while isinstance(val, dict) and len(val) == 1:
        k = next(iter(val.keys()))
        keys.append(k)
        val = val[k]
    return keys, val


def fmt_object(obj, flatten):
    fields = []
    for k, v in obj.items():
        if flatten:
            keys, val = flatten_obj_item(k, v)
            formatted_key = ".".join(sanitize_key(i) for i in keys)
        else:
            formatted_key = sanitize_key(k)
            val = v
        fields.append(f"{formatted_key} = {fmt_any(val, flatten)};")

    return "{\n" + indent("\n".join(fields)) + "\n}"


def fmt_array(o, flatten):
    body = indent("\n".join(fmt_any(i, flatten) for i in o))
    return f"[\n{body}\n]"


def fmt_any(o, flatten):
    if isinstance(o, str):
        return nix_stringify(o)
    elif isinstance(o, (bool, int, float)):
        return json.dumps(o)
    if isinstance(o, list):
        return fmt_array(o, flatten)
    if isinstance(o, dict):
        return fmt_object(o, flatten)
    raise TypeError(f"Unknown type {type(o)!r}")

parser = argparse.ArgumentParser(description="Converts JSON objects into nix", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("file", nargs="?", help="JSON file to convert")
parser.add_argument("--flatten", action="store_true", help="Flatten nested objects")
args = parser.parse_args()

if args.file:
    with open(args.file, "r") as f:
        input_data = f.read()
else:
    input_data = sys.stdin.read()

data = json.loads(strip_comments(input_data))

print(fmt_any(data, flatten=args.flatten))