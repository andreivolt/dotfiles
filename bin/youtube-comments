#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source :rubygems
  gem 'httparty'
end

require 'cgi'
require 'json'
require 'optparse'

api_key = ENV['GOOGLE_API_KEY']
video_id = ARGV[0]

abort "Usage: #{__FILE__} VIDEO_ID [--json]" if video_id.nil?
abort "Ensure GOOGLE_API_KEY is set in your environment variables." if api_key.nil?

def transform_text(text)
  CGI.unescapeHTML(text).gsub('<br><br>', "\n\n").gsub('<br>', "\n")
end

def print_comment_tree(comment, options, level = 0, is_last = false, prefix = '')
  indent_width = prefix.length + 3
  wrap_width = 80 - indent_width > 20 ? 80 - indent_width : 20
  current_prefix = prefix + (is_last ? '└─ ' : '├─ ')

  author = comment['author']
  date = comment['date']
  text = transform_text(comment['text'])
  formatted_text = options[:json] ? text : text.gsub("\n", "\n#{prefix}#{is_last ? ' ' : '│ '}")

  if options[:json]
    puts JSON.pretty_generate(comment)
  else
    puts "#{current_prefix}#{author} (#{date}):"
    puts "#{prefix}#{is_last ? ' ' : '│ '}#{formatted_text}"
    puts "#{prefix}#{is_last ? ' ' : '│'}" # Add a blank line with the appropriate connector
  end

  if comment['replies']
    last_index = comment['replies'].length - 1
    comment['replies'].each_with_index do |reply, index|
      next_prefix = prefix + (is_last ? ' ' : '│ ')
      print_comment_tree(reply, options, level + 1, index == last_index, next_prefix)
    end
  end
end

begin
  options = { json: false }

  OptionParser.new do |opts|
    opts.banner = "Usage: #{__FILE__} VIDEO_ID [options]"

    opts.on("--json", "Output comments in JSON format")
  end.parse!(into: options)

  comments = []
  page_token = nil

  loop do
    response = HTTParty.get('https://www.googleapis.com/youtube/v3/commentThreads', query: {
      part: 'snippet',
      videoId: video_id,
      maxResults: 100,
      pageToken: page_token,
      key: api_key
    }).parsed_response

    response['items'].each do |item|
      top_level_comment = item['snippet']['topLevelComment']['snippet']
      replies =
        if item['snippet']['totalReplyCount'] > 0
          replies_response = HTTParty.get('https://www.googleapis.com/youtube/v3/comments', query: {
            part: 'snippet',
            parentId: item['snippet']['topLevelComment']['id'],
            maxResults: 100,
            key: api_key
          }).parsed_response

          replies_response['items'].map do |reply|
            {
              author: reply['snippet']['authorDisplayName'],
              date: reply['snippet']['publishedAt'],
              text: transform_text(reply['snippet']['textDisplay'])
            }
          end
        else
          []
        end

      next if replies.empty?

      comments << {
        author: top_level_comment['authorDisplayName'],
        date: top_level_comment['publishedAt'],
        text: transform_text(top_level_comment['textDisplay']),
        replies: replies
      }
    end

    page_token = response['nextPageToken']
    break unless page_token
  end

  comments.each do |comment|
    print_comment_tree(comment, options)
  end
rescue => e
  abort "Error: #{e.message}"
end
