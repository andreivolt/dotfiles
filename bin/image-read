#!/usr/bin/env -S uv run --script --quiet
"""
AI-powered text extraction from images using LLM.
"""
# /// script
# dependencies = ["rich"]
# ///

import argparse
import subprocess
import sys
import tempfile
from pathlib import Path
from rich.console import Console
from rich.markdown import Markdown


def _looks_like_markdown(text):
    """Simple heuristic to detect if text contains markdown formatting."""
    markdown_indicators = [
        '# ', '## ', '### ',  # Headers
        '**', '__',            # Bold
        '*', '_',              # Italic (but be careful with false positives)
        '- ', '* ',            # Lists
        '```',                 # Code blocks
        '[', '](', '![',       # Links and images
        '|',                   # Tables
    ]
    
    # Check for multiple indicators to avoid false positives
    indicator_count = sum(1 for indicator in markdown_indicators if indicator in text)
    return indicator_count >= 2


def get_mime_type(file_path):
    """Get MIME type of file using the file command."""
    try:
        result = subprocess.run(
            ["file", "--mime-type", "-b", str(file_path)],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return None


def run_llm_ocr(image_path, mode, custom_prompt=None):
    """Run LLM command with appropriate prompt and attachment."""
    function_description = "You are an AI assistant specialized in optical character recognition (OCR) and text extraction from images."
    
    if mode == "readable":
        base_prompt = "OCR this image and extract the text with readable formatting. Make sensible adjustments for better readability, fix obvious OCR errors, and organize the content in a clear, well-structured way."
    else:  # layout mode
        base_prompt = "OCR this image and preserve the original layout as closely as possible. Maintain spacing, alignment, and visual structure exactly as shown in the image."
    
    if custom_prompt:
        prompt = f"{function_description}\n\n{base_prompt}\n\nAdditional instructions: {custom_prompt}"
    else:
        prompt = f"{function_description}\n\n{base_prompt}"

    mime_type = get_mime_type(image_path)
    if not mime_type:
        print(f"Error: Could not determine MIME type for '{image_path}'", file=sys.stderr)
        return 1

    if not mime_type.startswith("image/"):
        print(f"Error: '{image_path}' is not an image file (detected: {mime_type})", file=sys.stderr)
        return 1

    try:
        # Capture output to determine if we should render as markdown
        result = subprocess.run([
            "llm", prompt,
            "--at", str(image_path), mime_type
        ], capture_output=True, text=True, check=True)
        
        output = result.stdout
        
        # If output is to terminal and looks like markdown, render with rich
        if sys.stdout.isatty() and _looks_like_markdown(output):
            console = Console()
            markdown = Markdown(output)
            console.print(markdown)
        else:
            # Otherwise, just print normally
            print(output, end='')
            
        return 0
    except subprocess.CalledProcessError as e:
        print(f"Error running LLM command: {e}", file=sys.stderr)
        return 1
    except FileNotFoundError:
        print("Error: 'llm' command not found. Please install it first.", file=sys.stderr)
        return 1


def main():
    parser = argparse.ArgumentParser(
        description="AI-powered text extraction from images using LLM"
    )

    parser.add_argument(
        "image_file",
        nargs="?",
        help="Image file to extract text from (use - for stdin)"
    )

    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument(
        "-r", "--readable",
        action="store_const",
        const="readable",
        dest="mode",
        help="Extract text with readable formatting and sensible adjustments (default)"
    )
    mode_group.add_argument(
        "-l", "--layout",
        action="store_const",
        const="layout",
        dest="mode",
        help="Preserve original layout as closely as possible"
    )
    
    parser.add_argument(
        "-p", "--prompt",
        help="Custom prompt to append to the default OCR prompt. This allows additional instructions that work alongside the base OCR functionality"
    )

    args = parser.parse_args()

    # Default to readable mode
    mode = args.mode or "readable"

    # Handle stdin input
    if args.image_file == "-" or not args.image_file:
        if sys.stdin.isatty():
            print("Error: No image file specified and stdin is empty", file=sys.stderr)
            return 1

        # Read from stdin and write to temporary file
        try:
            data = sys.stdin.buffer.read()
            if not data:
                print("Error: No data received from stdin", file=sys.stderr)
                return 1

            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                temp_file.write(data)
                temp_path = Path(temp_file.name)
        except Exception as e:
            print(f"Error reading from stdin: {e}", file=sys.stderr)
            return 1

        try:
            return run_llm_ocr(temp_path, mode, args.prompt)
        finally:
            # Clean up temp file
            try:
                temp_path.unlink()
            except:
                pass

    # Handle file input
    image_path = Path(args.image_file)
    if not image_path.exists():
        print(f"Error: File '{args.image_file}' not found", file=sys.stderr)
        return 1

    if not image_path.is_file():
        print(f"Error: '{args.image_file}' is not a file", file=sys.stderr)
        return 1

    return run_llm_ocr(image_path, mode, args.prompt)


if __name__ == "__main__":
    sys.exit(main())
