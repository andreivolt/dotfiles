#!/usr/bin/env -S uv run --script --quiet
"""Monitor Chromecast device status and activity."""
# /// script
# dependencies = [
#   "pychromecast~=14.0",
# ]
# ///


import pychromecast
import json
import time
import threading
import sys
import os

known_devices = {}

def device_discovered(uuid, service):
    """Called when a new chromecast is discovered"""
    try:
        # Get chromecast info from the service
        cast_info = pychromecast.discovery.get_info_from_service(service)
        if cast_info:
            known_devices[uuid] = cast_info
            print(json.dumps({
                "action": "add",
                "name": cast_info.friendly_name,
                "ip": cast_info.host,
                "port": cast_info.port,
                "uuid": uuid,
                "model": cast_info.model_name
            }))
            sys.stdout.flush()
    except Exception as e:
        pass

def device_removed(uuid, service):
    """Called when a chromecast is removed"""
    if uuid in known_devices:
        info = known_devices.pop(uuid)
        print(json.dumps({
            "action": "remove",
            "name": info.friendly_name,
            "uuid": uuid
        }))
        sys.stdout.flush()

# Create discovery browser
browser = pychromecast.discovery.CastBrowser(
    pychromecast.discovery.SimpleCastListener(device_discovered, device_removed)
)

# Check if stdout is a terminal
is_interactive = sys.stdout.isatty()

if not is_interactive:
    # Non-interactive mode - use immediate discovery
    chromecasts, discovery_browser = pychromecast.get_chromecasts(timeout=10)
    for cast in chromecasts:
        print(json.dumps({
            "action": "add",
            "name": cast.cast_info.friendly_name,
            "ip": cast.cast_info.host,
            "port": cast.cast_info.port,
            "uuid": str(cast.cast_info.uuid),
            "model": cast.cast_info.model_name
        }))
    discovery_browser.stop_discovery()
else:
    # Interactive mode - show existing devices first, then monitor for changes
    chromecasts, discovery_browser = pychromecast.get_chromecasts(timeout=5)
    for cast in chromecasts:
        known_devices[str(cast.cast_info.uuid)] = cast.cast_info
        print(json.dumps({
            "action": "add",
            "name": cast.cast_info.friendly_name,
            "ip": cast.cast_info.host,
            "port": cast.cast_info.port,
            "uuid": str(cast.cast_info.uuid),
            "model": cast.cast_info.model_name
        }))
        sys.stdout.flush()
    discovery_browser.stop_discovery()

    # Now start monitoring for changes
    browser.start_discovery()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        browser.stop_discovery()