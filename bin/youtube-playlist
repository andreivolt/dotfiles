#!/usr/bin/env -S uv run --script --quiet
"""Create YouTube playlists."""
# /// script
# dependencies = [
#   "google-api-python-client",
#   "google-auth",
#   "google-auth-oauthlib",
#   "openai",
# ]
# ///


import argparse
import os
import sys
from pathlib import Path
import json

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import openai
from platformdirs import user_data_dir


SCOPES = ['https://www.googleapis.com/auth/youtube']
APPLICATION_NAME = 'YouTube Playlist Creator'
CONFIG_DIR = Path(user_data_dir('youtube-playlist-creator'))
CREDENTIALS_PATH = CONFIG_DIR / 'credentials.json'

def get_authenticated_service():
    creds = None

    if CREDENTIALS_PATH.exists():
        creds = Credentials.from_authorized_user_file(str(CREDENTIALS_PATH), SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            client_config = {
                'installed': {
                    'client_id': os.environ['GOOGLE_CLIENT_ID'],
                    'client_secret': os.environ['GOOGLE_CLIENT_SECRET'],
                    'auth_uri': 'https://accounts.google.com/o/oauth2/auth',
                    'token_uri': 'https://oauth2.googleapis.com/token'
                }
            }

            flow = InstalledAppFlow.from_client_config(client_config, SCOPES)
            creds = flow.run_local_server(port=0)

        CONFIG_DIR.mkdir(parents=True, exist_ok=True)
        with open(CREDENTIALS_PATH, 'w') as token:
            token.write(creds.to_json())

    return build('youtube', 'v3', credentials=creds)

def create_playlist(youtube, title, description, privacy_status):
    try:
        playlist = youtube.playlists().insert(
            part='snippet,status',
            body={
                'snippet': {
                    'title': title,
                    'description': description
                },
                'status': {
                    'privacyStatus': privacy_status
                }
            }
        ).execute()

        return playlist
    except HttpError as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

def add_video_to_playlist(youtube, playlist_id, video_id):
    try:
        youtube.playlistItems().insert(
            part='snippet',
            body={
                'snippet': {
                    'playlistId': playlist_id,
                    'resourceId': {
                        'kind': 'youtube#video',
                        'videoId': video_id
                    }
                }
            }
        ).execute()
        return True
    except HttpError as e:
        print(f"An error occurred adding video {video_id}: {e}")
        return False

def get_video_title(youtube, video_id):
    try:
        response = youtube.videos().list(
            part='snippet',
            id=video_id
        ).execute()

        if response['items']:
            return response['items'][0]['snippet']['title']
        return None
    except HttpError:
        return None

def generate_playlist_name(video_titles):
    client = openai.OpenAI(api_key=os.environ['OPENAI_API_KEY'])

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{
                "role": "user",
                "content": f"Suggest a very descriptive and succinct name for a YouTube playlist, not editorialized, just descriptive, based on the following video titles:\n\n{chr(10).join(video_titles)}"
            }],
            max_tokens=100,
            temperature=0.7
        )

        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Error generating playlist name: {e}")
        return "Generated Playlist"

def update_playlist_title(youtube, playlist_id, new_title):
    try:
        playlist = youtube.playlists().list(
            part='snippet',
            id=playlist_id
        ).execute()

        if playlist['items']:
            playlist_snippet = playlist['items'][0]['snippet']
            playlist_snippet['title'] = new_title

            youtube.playlists().update(
                part='snippet',
                body={
                    'id': playlist_id,
                    'snippet': playlist_snippet
                }
            ).execute()
            return True
        return False
    except HttpError as e:
        print(f"Error updating playlist title: {e}")
        return False

# Parse arguments
parser = argparse.ArgumentParser(description=__doc__.strip(), formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--public', action='store_true', help='Make playlist public')
parser.add_argument('--name', type=str, help='Playlist name')

args = parser.parse_args()

privacy_status = 'public' if args.public else 'private'
playlist_name = args.name or 'New Playlist Title'

youtube = get_authenticated_service()

playlist = create_playlist(
    youtube,
    playlist_name,
    f'A {privacy_status} playlist created with the YouTube API',
    privacy_status
)

playlist_id = playlist['id']
print(f"New playlist created: {playlist_id}")

video_titles = []

for line in sys.stdin:
    url = line.strip()
    if not url:
        continue

    video_id = url.split('watch?v=')[-1].split('&')[0]

    video_title = get_video_title(youtube, video_id)
    if video_title:
        video_titles.append(video_title)

        if add_video_to_playlist(youtube, playlist_id, video_id):
            print(f"Added video {video_id} to playlist")

if not args.name and video_titles:
    suggested_name = generate_playlist_name(video_titles)
    if update_playlist_title(youtube, playlist_id, suggested_name):
        print(f"Playlist title updated to: {suggested_name}")
