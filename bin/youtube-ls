#!/usr/bin/env -S uv run --script --quiet
"""List YouTube channel videos and playlists using Google API."""
# /// script
# requires-python = ">=3.10"
# dependencies = [
#   "aiohttp>=3",
#   "diskcache>=5",
#   "platformdirs>=3",
# ]
# ///


import sys, os, re, json, hashlib, asyncio, contextlib
from urllib.parse import urlparse
import aiohttp
from diskcache import Cache
from platformdirs import user_cache_dir

API = "https://youtube.googleapis.com/youtube/v3"
KEY = os.environ["GOOGLE_API_KEY"]
CACHE = Cache(user_cache_dir("youtube-ls"))

def _persist(fn):
    async def wrap(*a, **k):
        kstr = hashlib.sha1(
            json.dumps([fn.__name__, a, k], default=str, sort_keys=True).encode()
        ).hexdigest()
        if kstr in CACHE:
            return CACHE[kstr]
        res = await fn(*a, **k)
        CACHE[kstr] = res
        return res
    return wrap

arg = sys.argv[1] if len(sys.argv) >= 2 else None
if not arg:
    print(f"Usage: {sys.argv[0]} <channel URL | @handle | id | search text>")
    sys.exit(1)

def _parse(target: str) -> tuple[str, str]:
    if target.startswith(("http://", "https://")):
        p = urlparse(target)
        parts = [x for x in p.path.split("/") if x]
        if parts and parts[0] == "channel" and len(parts) > 1:
            return "id", parts[1]
        if parts and parts[0].startswith("@"):
            return "handle", parts[0][1:]
        if parts and parts[0] in ("c", "user") and len(parts) > 1:
            return "username", parts[1]
    if re.fullmatch(r"UC[\w-]{22}", target):
        return "id", target
    if target.startswith("@"):
        return "handle", target[1:]
    return "search", target

@_persist
async def channel_id(spec: str) -> str:
    mode, val = _parse(spec)
    async with aiohttp.ClientSession() as s:
        if mode in ("id",):
            return val
        params = {"part": "id", "key": KEY}
        if mode == "handle":
            params["forHandle"] = val
        elif mode == "username":
            params["forUsername"] = val
        elif mode == "search":
            params = {"part": "snippet", "q": val, "type": "channel", "maxResults": 1, "key": KEY}
            url = f"{API}/search"
            async with s.get(url, params=params) as r:
                data = await r.json()
            items = data.get("items", [])
            return items[0]["id"]["channelId"] if items else ""
        url = f"{API}/channels"
        async with s.get(url, params=params) as r:
            data = await r.json()
    items = data.get("items", [])
    return items[0]["id"] if items else ""

@_persist
async def video_ids(cid: str) -> list[str]:
    vids, seen, q = [], {None}, asyncio.Queue()
    await q.put(None)
    async with aiohttp.ClientSession() as s:
        async def work():
            while True:
                tok = await q.get()
                p = dict(
                    part="id",
                    channelId=cid,
                    type="video",
                    order="date",
                    maxResults=50,
                    key=KEY,
                )
                if tok:
                    p["pageToken"] = tok
                async with s.get(f"{API}/search", params=p) as r:
                    data = await r.json()
                vids.extend(
                    it["id"]["videoId"]
                    for it in data.get("items", [])
                    if it["id"]["kind"] == "youtube#video"
                )
                nxt = data.get("nextPageToken")
                if nxt and nxt not in seen:
                    seen.add(nxt)
                    await q.put(nxt)
                q.task_done()
        tasks = [asyncio.create_task(work()) for _ in range(4)]
        await q.join()
        for t in tasks:
            t.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await t
    return vids

async def _run():
    cid = await channel_id(arg)
    if not cid:
        print(f"No channel found for '{arg}'")
        return
    for v in await video_ids(cid):
        print(f"https://www.youtube.com/watch?v={v}")

asyncio.run(_run())
