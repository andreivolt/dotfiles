#!/usr/bin/env -S uv run --script --quiet
"""Convert documents to PDF using LibreOffice."""
# /// script
# dependencies = [
#   "sh",
# ]
# ///


import argparse
import os
import shutil
import sys
import tempfile
from pathlib import Path
from sh import soffice, ErrorReturnCode

def log(msg, quiet):
    if not quiet:
        print(msg, file=sys.stderr)

parser = argparse.ArgumentParser(description=__doc__.strip(), formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("-o", "--output", help="Output file (for stdin mode)")
parser.add_argument("-q", "--quiet", action="store_true", help="Quiet mode")
parser.add_argument("files", nargs="*", help="Input files to convert")

args = parser.parse_args()

# Handle stdin mode
if not sys.stdin.isatty():
    with tempfile.NamedTemporaryFile(prefix='any2pdf', suffix='.tmp', delete=False) as temp:
        shutil.copyfileobj(sys.stdin.buffer, temp)
        temp_path = temp.name

    try:
        # Convert using LibreOffice
        soffice("--headless", "--convert-to", "pdf",
                "--outdir", os.path.dirname(temp_path), temp_path,
                _out="/dev/null", _err="/dev/null")

        pdf_file = str(Path(temp_path).with_suffix('.pdf'))

        if os.path.exists(pdf_file):
            if args.output:
                shutil.copy2(pdf_file, args.output)
                log(f"Created '{args.output}'", args.quiet)
            else:
                with open(pdf_file, 'rb') as f:
                    shutil.copyfileobj(f, sys.stdout.buffer)
            os.unlink(pdf_file)
        else:
            log("Error: Conversion failed", args.quiet)
            sys.exit(1)
    except ErrorReturnCode as e:
        log(f"Error: LibreOffice conversion failed: {e}", args.quiet)
        sys.exit(1)
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass
    sys.exit(0)

if not args.files:
    parser.print_help()
    sys.exit(1)

for file in args.files:
    if not os.path.exists(file):
        log(f"Error: '{file}' not found", args.quiet)
        continue

    log(f"Converting '{file}'", args.quiet)
    try:
        soffice("--headless", "--convert-to", "pdf",
                "--outdir", os.path.dirname(file), file,
                _out="/dev/null", _err="/dev/null")
    except ErrorReturnCode:
        log(f"Error: Failed to convert '{file}'", args.quiet)
        continue

    # Generate output filename

    output = str(Path(file).with_suffix('.pdf'))

    if os.path.exists(output):
        log(f"Created '{output}'", args.quiet)
    else:
        log(f"Error: Failed to convert '{file}'", args.quiet)
