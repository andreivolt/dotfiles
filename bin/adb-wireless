#!/usr/bin/env -S uv run --script --quiet
"""Enable/disable wireless ADB debugging on Android devices."""
# /// script
# dependencies = [
#   "pure-python-adb",
# ]
# ///


import argparse
import sys
import time
import json
import signal
import atexit
from contextlib import contextmanager
from ppadb.client import Client as AdbClient



@contextmanager
def adb_wireless_context():
    """Context manager to ensure adb_wifi_enabled is reset even if program is killed"""
    device_ref = {'device': None}

    def cleanup():
        if device_ref['device']:
            try:
                device_ref['device'].shell("settings put global adb_wifi_enabled 0")
            except Exception:
                pass

    def signal_handler(signum, frame):
        cleanup()
        sys.exit(1)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    atexit.register(cleanup)

    try:
        yield device_ref
    finally:
        cleanup()


def get_device_ip(device):
    result = device.shell("getprop dhcp.wlan0.ipaddress")
    return result.strip() if result and result.strip() else None


def enable_wireless():
    print("Enabling wireless debugging...")

    with adb_wireless_context() as device_ref:
        client = AdbClient()
        devices = client.devices()

        if not devices:
            print("Error: No devices connected via USB")
            sys.exit(1)

        device = devices[0]
        device_ref['device'] = device

        device.shell("settings put global adb_wifi_enabled 1")

        ip = get_device_ip(device)
        if not ip:
            print("Error: Could not get device IP address. Is WiFi connected?")
            sys.exit(1)

        print(f"Device IP: {ip}")

        client.remote_connect(5555)
        time.sleep(2)

        try:
            client.remote_connect(ip, 5555)
            print(f"Connecting to {ip}:5555...")
            print("Connected. You can disconnect USB.")
        except Exception as e:
            print(f"Error connecting to {ip}:5555: {e}")
            sys.exit(1)


def disable_wireless():
    print("Disabling wireless debugging...")

    client = AdbClient()
    devices = client.devices()

    if not devices:
        print("No devices connected")
        sys.exit(1)

    for device in devices:
        try:
            device.shell("settings put global adb_wifi_enabled 0")
            print(f"✓ Disabled wireless debugging on {device.serial}")
        except Exception:
            print(f"✗ Failed to disable on {device.serial}")

    print("Wireless debugging disabled")


def show_status():
    client = AdbClient()
    devices = client.devices()

    print("List of devices attached")
    for device in devices:
        state = "device" if device.get_state() == "device" else device.get_state()
        print(f"{device.serial}\t{state}")

    wireless_count = sum(1 for device in devices if ':' in device.serial)
    if wireless_count > 0:
        print(f"Wireless connections: {wireless_count}")
    else:
        print("No wireless connections")


parser = argparse.ArgumentParser(description=__doc__.strip(), formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("command", choices=["enable", "disable", "status"],
                   help="Command to execute")

args = parser.parse_args()

if args.command == "enable":
    enable_wireless()
elif args.command == "disable":
    disable_wireless()
elif args.command == "status":
    show_status()
