#!/usr/bin/env -S uv run --script --quiet
# /// script
# dependencies = [
#     "exa_py",
#     "click",
# ]
# ///

import os
import sys
import click
from exa_py import Exa
from typing import List, Optional, Union, Literal

EXA_API_KEY = os.getenv('EXA_API_KEY')
if not EXA_API_KEY:
    click.echo("Error: EXA_API_KEY environment variable not set.")
    sys.exit(1)

exa = Exa(EXA_API_KEY)

def common_search_options(func):
    """Decorator to add common search options to multiple commands."""
    func = click.argument('query')(func)
    func = click.option('--num-results', default=10, type=int, help='Number of search results to return.')(func)
    func = click.option('--use-autoprompt', is_flag=True, help='Convert query to a query best suited for Exa.')(func)
    func = click.option('--type', default="auto", type=click.Choice(['auto', 'keyword', 'neural']), help='Type of search: keyword or neural.')(func)
    func = click.option('--category', default=None, help='Data category to focus on when searching.')(func)
    func = click.option('--include-domains', multiple=True, help='List of domains to include in the search.')(func)
    func = click.option('--exclude-domains', multiple=True, help='List of domains to exclude from the search.')(func)
    func = click.option('--include-text', multiple=True, help='Strings that must be present in the webpage text of results (up to 5 words).')(func)
    func = click.option('--start-crawl-date', default=None, help='Include links crawled after this date (YYYY-MM-DD).')(func)
    func = click.option('--end-crawl-date', default=None, help='Include links crawled before this date (YYYY-MM-DD).')(func)
    func = click.option('--start-published-date', default=None, help='Include links published after this date (YYYY-MM-DD).')(func)
    func = click.option('--end-published-date', default=None, help='Include links published before this date (YYYY-MM-DD).')(func)
    return func

def common_find_similar_options(func):
    """Decorator to add common find_similar options to multiple commands."""
    func = click.argument('url')(func)
    func = click.option('--num-results', default=10, type=int, help='Number of similar results to return.')(func)
    func = click.option('--exclude-source-domain', is_flag=True, help='Exclude results from the same domain as the input URL.')(func)
    func = click.option('--include-domains', multiple=True, help='List of domains to include in the search.')(func)
    func = click.option('--exclude-domains', multiple=True, help='List of domains to exclude from the search.')(func)
    func = click.option('--include-text', multiple=True, help='Strings that must be present in the webpage text of results (up to 5 words).')(func)
    func = click.option('--start-crawl-date', default=None, help='Include links crawled after this date (YYYY-MM-DD).')(func)
    func = click.option('--end-crawl-date', default=None, help='Include links crawled before this date (YYYY-MM-DD).')(func)
    func = click.option('--start-published-date', default=None, help='Include links published after this date (YYYY-MM-DD).')(func)
    func = click.option('--end-published-date', default=None, help='Include links published before this date (YYYY-MM-DD).')(func)
    func = click.option('--category', default=None, help='Data category to focus on when searching.')(func)
    return func

@click.group()
def cli():
    """Exa CLI - Command Line Interface for Exa Python SDK"""
    pass

@cli.command()
@common_search_options
@click.option('--livecrawl', type=click.Choice(['always', 'fallback', 'never']), default=None, help='Options for live crawling content.')
@click.option('--livecrawlTimeout', type=int, default=10000, help='Timeout for live crawling in milliseconds (Max: 10000).')
def search(query, num_results, use_autoprompt, type, category, include_domains, exclude_domains,
           include_text, start_crawl_date, end_crawl_date, start_published_date, end_published_date,
           livecrawl, livecrawltimeout):
    """
    Perform an Exa search given an input query and retrieve a list of relevant results as links.
    """
    result = exa.search(
        query=query,
        num_results=num_results,
        use_autoprompt=use_autoprompt,
        type=type,
        category=category,
        include_domains=list(include_domains) if include_domains else None,
        exclude_domains=list(exclude_domains) if exclude_domains else None,
        include_text=list(include_text) if include_text else None,
        start_crawl_date=start_crawl_date,
        end_crawl_date=end_crawl_date,
        start_published_date=start_published_date,
        end_published_date=end_published_date
    )
    click.echo(result)

@cli.command()
@common_search_options
@click.option('--text', is_flag=True, help='Include full text of the content in the results.')
@click.option('--highlights', is_flag=True, help='Include highlights of the content in the results.')
@click.option('--summaries', is_flag=True, help='Provide summaries of the content in the results.')
@click.option('--livecrawl', type=click.Choice(['always', 'fallback', 'never']), default=None, help='Options for live crawling content.')
@click.option('--livecrawlTimeout', type=int, default=10000, help='Timeout for live crawling in milliseconds (Max: 10000).')
def search_and_contents(query, num_results, use_autoprompt, type, category, include_domains, exclude_domains,
                        include_text, start_crawl_date, end_crawl_date, start_published_date, end_published_date,
                        text, highlights, summaries, livecrawl, livecrawltimeout):
    """
    Perform an Exa search and retrieve results with optional full text and highlights.
    """
    result = exa.search_and_contents(
        query=query,
        num_results=num_results,
        use_autoprompt=use_autoprompt,
        type=type,
        category=category,
        include_domains=list(include_domains) if include_domains else None,
        exclude_domains=list(exclude_domains) if exclude_domains else None,
        include_text=list(include_text) if include_text else None,
        start_crawl_date=start_crawl_date,
        end_crawl_date=end_crawl_date,
        start_published_date=start_published_date,
        end_published_date=end_published_date,
        text=True if text else None,
        highlights=True if highlights else None,
        summaries=True if summaries else None,
        livecrawl=livecrawl,
        livecrawlTimeout=livecrawltimeout
    )
    click.echo(result)

@cli.command()
@common_find_similar_options
def find_similar(url, num_results, exclude_source_domain, include_domains, exclude_domains,
                include_text, start_crawl_date, end_crawl_date, start_published_date, end_published_date,
                category):
    """
    Find a list of similar results based on a webpage's URL.
    """
    result = exa.find_similar(
        url=url,
        num_results=num_results,
        exclude_source_domain=exclude_source_domain,
        include_domains=list(include_domains) if include_domains else None,
        exclude_domains=list(exclude_domains) if exclude_domains else None,
        include_text=list(include_text) if include_text else None,
        start_crawl_date=start_crawl_date,
        end_crawl_date=end_crawl_date,
        start_published_date=start_published_date,
        end_published_date=end_published_date,
        category=category
    )
    click.echo(result)

@cli.command()
@common_find_similar_options
@click.option('--text', is_flag=True, help='Include full text of the content in the results.')
@click.option('--highlights', is_flag=True, help='Include highlights of the content in the results.')
@click.option('--summaries', is_flag=True, help='Provide summaries of the content in the results.')
@click.option('--livecrawl', type=click.Choice(['always', 'fallback', 'never']), default=None, help='Options for live crawling content.')
@click.option('--livecrawlTimeout', type=int, default=10000, help='Timeout for live crawling in milliseconds (Max: 10000).')
def find_similar_and_contents(url, num_results, exclude_source_domain, include_domains, exclude_domains,
                              include_text, start_crawl_date, end_crawl_date, start_published_date, end_published_date,
                              category, text, highlights, summaries, livecrawl, livecrawltimeout):
    """
    Find similar results with optional full text and highlights.
    """
    result = exa.find_similar_and_contents(
        url=url,
        num_results=num_results,
        exclude_source_domain=exclude_source_domain,
        include_domains=list(include_domains) if include_domains else None,
        exclude_domains=list(exclude_domains) if exclude_domains else None,
        include_text=list(include_text) if include_text else None,
        start_crawl_date=start_crawl_date,
        end_crawl_date=end_crawl_date,
        start_published_date=start_published_date,
        end_published_date=end_published_date,
        category=category,
        text=True if text else None,
        highlights=True if highlights else None,
        summaries=True if summaries else None,
        livecrawl=livecrawl,
        livecrawlTimeout=livecrawltimeout
    )
    click.echo(result)

if __name__ == '__main__':
    cli()
