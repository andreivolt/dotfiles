#!/usr/bin/env -S uv run --quiet --script
# /// script
# dependencies = [
#    "requests>=2.31.0",
# ]
# ///
import argparse
import os
import sys
import json
import requests
from pathlib import Path
from urllib.parse import urlencode
import mimetypes

# Model choices
NOVA_MODELS = ["nova-2", "nova-2-meeting", "nova-2-phonecall", "nova-2-voicemail", "nova-2-finance", "nova-2-conversationalai", "nova-2-video", "nova-2-medical", "nova-2-drivethru", "nova-2-automotive", "nova-3"]
WHISPER_MODELS = ["whisper-tiny", "whisper-base", "whisper-small", "whisper-medium", "whisper-large"]
ALL_MODELS = NOVA_MODELS + WHISPER_MODELS

# Redaction categories - basic and extended
REDACT_CHOICES = [
    # Basic categories
    "pci", "pii", "numbers", "true",
    # Extended categories (50+ entity types)
    "account_number", "address", "banking_information", "blood_type", 
    "credit_card", "credit_card_cvv", "credit_card_expiration", 
    "date", "date_interval", "date_of_birth", "drivers_license",
    "drug", "duration", "email_address", "event", "filename", 
    "gender_sexuality", "healthcare_number", "injury", "ip_address",
    "language", "location", "marital_status", "medical_condition",
    "medical_process", "money", "nationality", "occupation",
    "organization", "passport_number", "password", "person_age",
    "person_name", "phone_number", "physical_attribute", "political_affiliation",
    "religion", "statistics", "time", "url", "username", "vehicle_id",
    "zodiac_sign", "routing_number", "ssn"
]

class DependencyAction(argparse.Action):
    """Handle option dependencies"""
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)
        
        # If paragraphs is enabled, ensure at least one dependency is met
        if self.dest == 'paragraphs' and values:
            if not any([namespace.punctuate, namespace.diarize, namespace.multichannel]):
                # Auto-enable punctuate as it's the simplest option
                namespace.punctuate = True

def parse_keywords(value):
    """Parse keyword:boost format"""
    try:
        word, boost = value.split(':', 1)
        return f"{word}:{boost}"
    except ValueError:
        raise argparse.ArgumentTypeError(f"Keywords must be in 'word:boost' format, got: {value}")

def parse_replace(value):
    """Parse from:to format"""
    try:
        from_word, to_word = value.split(':', 1)
        return f"{from_word}:{to_word}"
    except ValueError:
        raise argparse.ArgumentTypeError(f"Replace must be in 'from:to' format, got: {value}")

def parse_extra(value):
    """Parse key=value format"""
    try:
        key, val = value.split('=', 1)
        return {key: val}
    except ValueError:
        raise argparse.ArgumentTypeError(f"Extra must be in 'key=value' format, got: {value}")

def main():
    parser = argparse.ArgumentParser(
        description="Transcribe audio using Deepgram API with smart defaults",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Smart defaults enabled:
  - model: nova-3 (best accuracy, 5-40x faster than Whisper)
  - smart_format: true (includes punctuation, formatting)
  - diarize: true (speaker identification)
  - paragraphs: true (logical paragraph breaks)
  - utterances: true (semantic segmentation)
  
For meetings/calls: --model nova-2-meeting
For multilingual: --model whisper-large (slower but supports many languages)
For quick/cheap: --model whisper-base --no-smart-format --no-diarize

Note: Nova-3 uses 'keyterms' instead of 'keywords'
Note: Whisper models don't support --search option
        """
    )
    
    parser.add_argument("input", help="Audio file path or URL to transcribe")
    
    # Model selection
    parser.add_argument("-m", "--model", 
                       choices=ALL_MODELS,
                       default="nova-3",
                       help="Model to use (default: nova-3)")
    
    # Core features with smart defaults
    parser.add_argument("--no-smart-format", dest="smart_format", action="store_false", default=True,
                       help="Disable smart formatting (enabled by default)")
    parser.add_argument("--no-diarize", dest="diarize", action="store_false", default=True,
                       help="Disable speaker diarization (enabled by default)")
    parser.add_argument("--no-paragraphs", dest="paragraphs", action="store_false", default=True,
                       help="Disable paragraph detection (enabled by default)")
    parser.add_argument("--no-utterances", dest="utterances", action="store_false", default=True,
                       help="Disable utterance segmentation (enabled by default)")
    
    # Additional formatting
    parser.add_argument("--punctuate", action="store_true", default=False,
                       help="Add punctuation (not needed with smart_format)")
    parser.add_argument("--numerals", action="store_true", default=False,
                       help="Convert numbers to digits")
    parser.add_argument("--profanity-filter", action="store_true", default=False,
                       help="Filter profanity")
    parser.add_argument("--measurements", action="store_true", default=False,
                       help="Convert measurements to abbreviations")
    parser.add_argument("--dictation", action="store_true", default=False,
                       help="Format dictation commands")
    parser.add_argument("--filler-words", action="store_true", default=False,
                       help="Include filler words (um, uh)")
    
    # Language options
    parser.add_argument("--language", default="en",
                       help="Language code (default: en)")
    parser.add_argument("--detect-language", action="store_true", default=False,
                       help="Auto-detect language")
    
    # Advanced features
    parser.add_argument("--multichannel", action="store_true", default=False,
                       help="Process channels independently")
    parser.add_argument("--channels", type=int,
                       help="Number of independent audio channels")
    parser.add_argument("--utt-split", type=float, default=0.8,
                       help="Utterance split duration (default: 0.8)")
    
    # Entity/content detection
    parser.add_argument("--detect-entities", action="store_true", default=False,
                       help="Detect entities")
    parser.add_argument("--detect-topics", action="store_true", default=False,
                       help="Detect topics")
    parser.add_argument("--topics", action="store_true", default=False,
                       help="Identify topics")
    parser.add_argument("--intents", action="store_true", default=False,
                       help="Detect speaker intents")
    parser.add_argument("--sentiment", action="store_true", default=False,
                       help="Analyze sentiment")
    parser.add_argument("--summarize", choices=["v2"], help="Generate summary")
    
    # Search and modification
    parser.add_argument("--keywords", type=parse_keywords, action="append",
                       help="Boost keywords (format: word:boost)")
    parser.add_argument("--search", action="append",
                       help="Search for terms (not supported by Whisper)")
    parser.add_argument("--replace", type=parse_replace, action="append",
                       help="Replace terms (format: from:to)")
    parser.add_argument("--redact", choices=REDACT_CHOICES, action="append",
                       help="Redact sensitive info")
    
    # Custom options
    parser.add_argument("--custom-topic", help="Custom topic for detection")
    parser.add_argument("--custom-topic-mode", default="extended",
                       choices=["strict", "extended"],
                       help="Custom topic mode (default: extended)")
    parser.add_argument("--tag", help="Tag for the request")
    parser.add_argument("--callback", help="URL for receiving results")
    parser.add_argument("--tier", help="Model tier level")
    parser.add_argument("--alternatives", type=int,
                       help="Max number of transcript alternatives")
    parser.add_argument("--encoding", 
                       choices=["linear16", "flac", "mulaw", "amr-nb", "amr-wb", "opus", "speex"],
                       help="Audio encoding for streaming")
    parser.add_argument("--sample-rate", type=int,
                       help="Sample rate in Hz")
    parser.add_argument("--extra", type=parse_extra, action="append",
                       help="Extra parameters (format: key=value)")
    parser.add_argument("--version", default="latest",
                       help="Model version (default: latest)")
    
    args = parser.parse_args()
    
    # Validate dependencies
    if args.paragraphs and not any([args.punctuate, args.diarize, args.multichannel, args.smart_format]):
        parser.error("--paragraphs requires --punctuate, --diarize, --multichannel, or --smart-format")
    
    # Language-specific validations
    if args.language != 'en' and args.sentiment:
        parser.error("--sentiment is only supported for English (--language en)")
    
    # Model-language compatibility - auto-fallback for better UX
    if args.model == 'nova-3' and args.language != 'en':
        # Nova-3 has issues with non-English languages, fallback to nova-2
        print(f"Note: Using nova-2 for {args.language} language (better compatibility)", file=sys.stderr)
        args.model = 'nova-2'
    
    # Check for Whisper limitations
    is_whisper = args.model.startswith("whisper-")
    if is_whisper:
        if args.search:
            parser.error("--search is not supported with Whisper models")
        # Note: redact IS supported by Whisper according to docs
    
    # Build query parameters
    params = []
    
    # Add all boolean options
    for key in ['smart_format', 'diarize', 'paragraphs', 'utterances', 'punctuate', 
                'numerals', 'profanity_filter', 'measurements', 'dictation', 
                'filler_words', 'detect_entities', 'detect_language', 'detect_topics',
                'topics', 'intents', 'sentiment', 'multichannel']:
        if getattr(args, key):
            params.append((key, 'true'))
    
    # Add required parameters
    params.append(('model', args.model))
    params.append(('language', args.language))
    params.append(('utt_split', str(args.utt_split)))
    params.append(('version', args.version))
    
    # Add optional parameters
    if args.custom_topic:
        params.append(('custom_topic', args.custom_topic))
        params.append(('custom_topic_mode', args.custom_topic_mode))
    if args.tag:
        params.append(('tag', args.tag))
    if args.callback:
        params.append(('callback', args.callback))
    if args.tier:
        params.append(('tier', args.tier))
    if args.alternatives:
        params.append(('alternatives', str(args.alternatives)))
    if args.encoding:
        params.append(('encoding', args.encoding))
    if args.sample_rate:
        params.append(('sample_rate', str(args.sample_rate)))
    if args.channels:
        params.append(('channels', str(args.channels)))
    if args.summarize:
        params.append(('summarize', args.summarize))
    
    # Handle multiple value parameters
    if args.keywords:
        # For Nova-3, use keyterms instead
        param_name = 'keyterms' if 'nova-3' in args.model else 'keywords'
        for kw in args.keywords:
            params.append((param_name, kw))
    
    if args.search and not is_whisper:
        for term in args.search:
            params.append(('search', term))
    
    if args.redact:
        for category in args.redact:
            params.append(('redact', category))
    
    if args.replace:
        for replacement in args.replace:
            params.append(('replace', replacement))
    
    # Add extra parameters
    if args.extra:
        for extra_dict in args.extra:
            for k, v in extra_dict.items():
                params.append((k, v))
    
    # Get API key
    api_key = os.environ.get('DEEPGRAM_API_KEY')
    if not api_key:
        parser.error("DEEPGRAM_API_KEY environment variable not set")
    
    # Build URL with proper encoding
    query_string = urlencode(params)
    url = f"https://api.deepgram.com/v1/listen?{query_string}"
    
    # Prepare request
    headers = {
        'Authorization': f'Token {api_key}',
        'Accept': 'application/json'
    }
    
    # Handle input (URL or file)
    if args.input.startswith('http'):
        headers['Content-Type'] = 'application/json'
        data = json.dumps({'url': args.input})
    else:
        # Read file
        file_path = Path(args.input)
        if not file_path.exists():
            parser.error(f"File not found: {args.input}")
        
        # Guess content type
        content_type, _ = mimetypes.guess_type(args.input)
        if not content_type:
            # Default to audio/mpeg
            content_type = 'audio/mpeg'
        
        headers['Content-Type'] = content_type
        with open(args.input, 'rb') as f:
            data = f.read()
    
    # Make request
    try:
        response = requests.post(url, headers=headers, data=data, timeout=None)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}", file=sys.stderr)
        if response.status_code == 400:
            try:
                error_data = response.json()
                print(f"Error details: {error_data}", file=sys.stderr)
            except:
                print(f"Response body: {response.text}", file=sys.stderr)
        sys.exit(1)
    
    # Parse response
    result = response.json()
    
    # Output based on diarization
    if args.diarize:
        # Print with speaker labels
        words = result.get('results', {}).get('channels', [{}])[0].get('alternatives', [{}])[0].get('words', [])
        current_speaker = None
        
        for word in words:
            speaker = word.get('speaker')
            if speaker != current_speaker:
                if current_speaker is not None:
                    print()  # New line between speakers
                print(f"Speaker {speaker}: ", end='')
                current_speaker = speaker
            print(word.get('word', ''), end=' ')
        print()  # Final newline
    else:
        # Just print transcript
        transcript = result.get('results', {}).get('channels', [{}])[0].get('alternatives', [{}])[0].get('transcript', '')
        print(transcript)

if __name__ == "__main__":
    main()