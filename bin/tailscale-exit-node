#!/usr/bin/env -S uv run --script --quiet
"""Manage Tailscale exit nodes with interactive selection using fzf."""
# /// script
# dependencies = [
#   "sh",
# ]
# ///


import argparse
import random
from sh import Command, fzf, ErrorReturnCode
import sys
import os
import re
from typing import List, Optional, Dict

# Use the full Tailscale path for macOS
TAILSCALE = "/Applications/Tailscale.localized/Tailscale.app/Contents/MacOS/Tailscale"
tailscale = Command(TAILSCALE)



def list_exit_nodes(filter_text: Optional[str] = None) -> str:
    """List available exit nodes, optionally filtered."""
    try:
        if filter_text:
            return str(tailscale("exit-node", "list", "--filter", filter_text))
        else:
            return str(tailscale("exit-node", "list"))
    except ErrorReturnCode as e:
        print(f"Error: {e.stderr.decode()}", file=sys.stderr)
        sys.exit(1)

def set_exit_node(node_id: str) -> None:
    """Set the exit node to the specified node ID."""
    try:
        tailscale("set", "--exit-node", node_id)
    except ErrorReturnCode as e:
        print(f"Error: {e.stderr.decode()}", file=sys.stderr)
        sys.exit(1)

def clear_exit_node() -> None:
    """Clear the exit node setting."""
    set_exit_node("")

def parse_node_output(output: str) -> List[Dict]:
    """Parse the output of the list command and return structured node data."""
    # Filter out headers and help text
    lines = output.strip().split('\n')
    node_lines = [
        line for line in lines
        if not line.strip().startswith('#') and
        not line.strip().startswith('To ') and
        not ('IP' in line and 'HOSTNAME' in line and 'COUNTRY' in line)
    ]

    nodes_info = []
    for line in node_lines:
        # Skip empty lines
        if not line.strip():
            continue

        parts = [p for p in line.strip().split() if p]
        if len(parts) >= 3:  # Need at least IP, hostname, and country
            try:
                # Skip IP (parts[0]) and get hostname
                hostname = parts[1]

                # Get the remainder of the line after the hostname
                remainder_pos = line.find(hostname) + len(hostname)
                remainder = line[remainder_pos:].strip()

                # Remove the final dash (all lines have it)
                remainder = remainder[:-2].strip()

                # Check for various formats:

                # 1. Format with comma in remainder: "USA,Washington DC" or "UK,London"
                if ',' in remainder and len(remainder.split(',')[0].split()) <= 1:
                    split_on_comma = remainder.split(',', 1)
                    country = split_on_comma[0].strip()
                    city = split_on_comma[1].strip()

                    # If city has extra info separated by double spaces, keep only the city part
                    if '  ' in city:
                        city = city.split('  ')[0].strip()

                # 2. Format: "USA  Chicago,IL" (country, then spaces, then city with possible state code)
                elif '  ' in remainder:
                    # Split on double spaces to get country and city parts
                    country_city = remainder.split('  ', 1)
                    country = country_city[0].strip()
                    city = country_city[1].strip()

                    # If there are more spaces after city info, trim them
                    if '  ' in city:
                        city = city.split('  ')[0].strip()

                # 3. Two-word country formats: "Czech Republic  Prague", "Hong Kong  Central"
                elif len(parts) >= 4 and (
                    (parts[2] == "Hong" and parts[3] == "Kong") or
                    (parts[2] == "Czech" and parts[3] == "Republic") or
                    (parts[2] == "United" and parts[3] == "States")
                ):
                    # Extract the multi-word country name
                    if parts[2] == "Hong" and parts[3] == "Kong":
                        country = "Hong Kong"
                        country_end_pos = line.find(country) + len(country)
                    elif parts[2] == "Czech" and parts[3] == "Republic":
                        country = "Czech Republic"
                        country_end_pos = line.find(country) + len(country)
                    elif parts[2] == "United" and parts[3] == "States":
                        country = "United States"
                        country_end_pos = line.find(country) + len(country)

                    city_part = line[country_end_pos:].strip()

                    # Clean up city part
                    if '  ' in city_part:
                        city = city_part.split('  ')[0].strip()
                    else:
                        city = city_part

                # No fallback - ensure we have one of the known formats
                else:
                    # If we don't match any pattern, just use the parts directly
                    country = parts[2] if len(parts) > 2 else "Unknown"
                    city = remainder.replace(country, '', 1).strip()

                    # Clean up city part
                    if '  ' in city:
                        city = city.split('  ')[0].strip()

                # Create a display format with aligned columns
                nodes_info.append({
                    'hostname': hostname,
                    'country': country,
                    'city': city,
                    'display': f"{hostname.ljust(40)} {country.ljust(15)} {city}"
                })
            except Exception as e:
                # If we hit parsing issues, just add the line as-is
                print(f"Warning: Error parsing line: {line} - {str(e)}", file=sys.stderr)

    # Sort by country, then by city
    return sorted(nodes_info, key=lambda node: (node['country'], node['city']))

def interactive_select(filter_text: Optional[str] = None) -> None:
    """Interactively select an exit node using fzf."""
    nodes = list_exit_nodes(filter_text)
    nodes_info = parse_node_output(nodes)

    if not nodes_info:
        print("No exit nodes found" + (f" matching filter: {filter_text}" if filter_text else ""))
        sys.exit(1)

    # Create formatted output for fzf
    formatted_output = '\n'.join(node['display'] for node in nodes_info)

    # Run fzf for interactive selection
    try:
        selection = fzf("--prompt=Select Tailscale Exit Node> ", _in=formatted_output).strip()

        if selection.strip():
            # Extract hostname (first word)
            hostname = selection.strip().split()[0]

            set_exit_node(hostname)
            print(f"Exit node set to: {hostname}")
        else:
            print("No exit node selected")
    except FileNotFoundError:
        print("Error: fzf command not found. Please install fzf first.")
        sys.exit(1)

def random_exit_node(filter_text: Optional[str] = None) -> None:
    """Select a random exit node."""
    nodes = list_exit_nodes(filter_text)
    nodes_info = parse_node_output(nodes)

    if not nodes_info:
        print("No exit nodes found" + (f" matching filter: {filter_text}" if filter_text else ""))
        sys.exit(1)

    # Pick a random node
    random_node = random.choice(nodes_info)
    hostname = random_node['hostname']
    country = random_node['country']
    city = random_node['city']

    set_exit_node(hostname)
    print(f"Randomly selected exit node: {hostname} ({country}, {city})")

def list_nodes_formatted(filter_text: Optional[str] = None) -> None:
    """List exit nodes in formatted output."""
    nodes = list_exit_nodes(filter_text)
    nodes_info = parse_node_output(nodes)

    for node in nodes_info:
        print(node['display'])

# Create an argument parser with subcommands
parser = argparse.ArgumentParser(description="Manage Tailscale exit nodes with interactive selection"
, formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Create subparsers for commands
subparsers = parser.add_subparsers(dest='command', help='Command to run')

# set command
set_parser = subparsers.add_parser('set', help='Set exit node')
set_parser.add_argument('hostname', nargs='?', help='Hostname of exit node (interactive if omitted)')

# clear command
clear_parser = subparsers.add_parser('clear', help='Clear/disable exit node')

# list command
list_parser = subparsers.add_parser('list', help='List available exit nodes')
list_parser.add_argument('filter', nargs='?', help='Filter string')

# random command
random_parser = subparsers.add_parser('random', help='Select a random exit node')
random_parser.add_argument('filter', nargs='?', help='Filter string')

args = parser.parse_args()

# Default to 'set' if no command is provided
if not args.command:
    interactive_select()
    sys.exit(0)

# Handle commands

if args.command == 'set':
    if args.hostname:
        set_exit_node(args.hostname)
        print(f"Exit node set to: {args.hostname}")
    else:
        interactive_select()

elif args.command == 'clear':
    clear_exit_node()
    print("Exit node cleared")

elif args.command == 'list':
    list_nodes_formatted(args.filter)

elif args.command == 'random':
    random_exit_node(args.filter)
