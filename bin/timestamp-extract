#!/usr/bin/env -S uv run --script --quiet
"""Extract timestamp ranges from timestamped content using LLM."""
# /// script
# dependencies = [
#   "sh",
# ]
# ///


import sys
import argparse
from sh import llm, ErrorReturnCode
import json

def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('prompt', help='The topic to extract timestamp range for')
    args = parser.parse_args()

    content = sys.stdin.read()

    llm_prompt = f"""Extract the timestamp range when: {args.prompt}


Find where this topic is discussed and output a JSON object wrapped in a code block like:
```json
{{"start": "MM:SS", "end": "MM:SS"}}
```

Rules:
- Start: when the topic begins
- End: when the speaker finishes that specific explanation
- Use the exact timestamp format from the content
- If not found, output: {{"error": "No matching content found"}}

Content:
{content}"""

    # Run llm with --extract flag to extract first code block
    try:
        output = llm('-x', _in=llm_prompt)
    except ErrorReturnCode as e:
        print(f"Error running llm: {e.stderr.decode()}", file=sys.stderr)
        sys.exit(1)

    # Parse and validate the JSON response
    try:
        output_str = str(output).strip()
        if not output_str:
            print("Empty response from llm", file=sys.stderr)
            sys.exit(1)

        data = json.loads(output_str)
        if "error" in data:
            print(data["error"], file=sys.stderr)
            sys.exit(1)
        elif "start" in data and "end" in data:
            print(f"{data['start']} - {data['end']}")
        else:
            print("Invalid response format", file=sys.stderr)
            print(f"Got: {output_str}", file=sys.stderr)
            sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON: {e}", file=sys.stderr)
        print(f"Raw output: {output}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()