#!/usr/bin/env -S uv run -qs
# /// script
# dependencies = ["lifxlan", "click"]
# ///

import os
import sys
import json
import subprocess
import colorsys
from pathlib import Path
from lifxlan import LifxLAN, Light, BLUE, GREEN, RED, YELLOW, ORANGE, PURPLE, CYAN, WHITE
import click

# LIFX App themed colors
LIFX_THEMES = {
    "sunset": "12,75,80,2500",
    "candlelight": "35,100,25,1500",
    "fireplace": "25,100,40,2000",
    "dawn": "25,60,60,3000",
    "reading": "0,0,80,4000",
    "concentrate": "0,0,100,6500",
    "energize": "200,100,100,5500",
    "relax": "240,30,50,2700",
    "sleep": "0,100,5,2000",
    "romantic": "330,70,30,2200",
    "party": "300,100,100,3500",
    "movie": "240,100,20,2700",
    "forest": "120,80,60,3500",
    "ocean": "200,100,70,4000",
    "spring": "90,70,80,4500",
    "autumn": "30,90,70,2800",
}

PREDEFINED_COLORS = {
    "Red": RED,
    "Green": GREEN,
    "Blue": BLUE,
    "Yellow": YELLOW,
    "Orange": ORANGE,
    "Purple": PURPLE,
    "Cyan": CYAN,
    "White": WHITE,
}

HSBK_COLOR_OPTIONS = [
    ("Bright Red", "0,100,100,3500"),
    ("Deep Red", "0,100,50,3500"),
    ("Orange Red", "24,100,100,3500"),
    ("Orange", "48,100,100,3500"),
    ("Golden Yellow", "72,100,100,3500"),
    ("Bright Yellow", "96,100,100,3500"),
    ("Yellow Green", "120,100,100,3500"),
    ("Lime Green", "144,100,100,3500"),
    ("Bright Green", "120,100,100,3500"),
    ("Forest Green", "120,100,50,3500"),
    ("Cyan Green", "168,100,100,3500"),
    ("Aqua Cyan", "180,100,100,3500"),
    ("Sky Blue", "216,100,100,3500"),
    ("Bright Blue", "240,100,100,3500"),
    ("Deep Blue", "240,100,50,3500"),
    ("Royal Blue", "264,100,100,3500"),
    ("Purple Blue", "288,100,100,3500"),
    ("Bright Purple", "300,100,100,3500"),
    ("Deep Purple", "300,100,50,3500"),
    ("Magenta", "324,100,100,3500"),
    ("Pink", "336,50,100,3500"),
    ("Hot Pink", "336,100,100,3500"),
    ("Warm White", "0,0,100,2700"),
    ("Soft White", "0,0,100,3200"),
    ("Daylight White", "0,0,100,5500"),
    ("Cool White", "0,0,100,6500"),
    ("Dim Warm", "0,0,25,2700"),
    ("Cozy Orange", "36,50,70,2700"),
    ("Sunset", "12,75,80,2500"),
    ("Lavender", "280,40,80,3500"),
]

CACHE_FILE_NAME = "lifx.json"
LAST_USED_FILE_NAME = "lifx_last_used.json"

def get_cache_file_path():
    xdg_state_home = os.environ.get('XDG_STATE_HOME', Path.home() / '.local' / 'state')
    cache_dir = Path(xdg_state_home)
    cache_dir.mkdir(parents=True, exist_ok=True)
    cache_file = cache_dir / CACHE_FILE_NAME
    return cache_file

def load_cache(cache_file):
    try:
        with open(cache_file, 'r') as f:
            cached_lights = json.load(f)
        return cached_lights
    except:
        return None

def save_cache(cache_file, lights):
    try:
        with open(cache_file, 'w') as f:
            json.dump([{
                'label': light.get_label(),
                'ip_addr': light.get_ip_addr(),
                'mac_addr': light.get_mac_addr(),
                'power': light.get_power(),
                'color': light.get_color(),
            } for light in lights], f, indent=4)
    except:
        pass

def get_last_used_file_path():
    xdg_state_home = os.environ.get('XDG_STATE_HOME', Path.home() / '.local' / 'state')
    cache_dir = Path(xdg_state_home)
    cache_dir.mkdir(parents=True, exist_ok=True)
    last_used_file = cache_dir / LAST_USED_FILE_NAME
    return last_used_file

def save_last_used_lights(lights):
    try:
        last_used_file = get_last_used_file_path()
        with open(last_used_file, 'w') as f:
            json.dump([{
                'label': light.get_label(),
                'ip_addr': light.get_ip_addr(),
                'mac_addr': light.get_mac_addr(),
            } for light in lights], f, indent=4)
    except:
        pass

def load_last_used_lights():
    try:
        last_used_file = get_last_used_file_path()
        with open(last_used_file, 'r') as f:
            last_used_data = json.load(f)
        lights = []
        for light_data in last_used_data:
            try:
                light = Light(light_data['mac_addr'], light_data['ip_addr'])
                lights.append(light)
            except:
                pass
        return lights
    except:
        return None

def kelvin_to_hsbk(kelvin):
    try:
        kelvin = int(kelvin[:-1])
    except:
        return None
    if kelvin < 1500:
        kelvin = 1500
    elif kelvin > 9000:
        kelvin = 9000
    hue = 0
    saturation = 0
    brightness = 100
    return [hue, saturation, brightness, kelvin]

def intuitive_to_lifx_hsbk(h, s, b, k):
    """Convert intuitive HSBK (0-360, 0-100, 0-100, kelvin) to LIFX format (0-65535)"""
    lifx_h = int(h / 360 * 65535)
    lifx_s = int(s / 100 * 65535)
    lifx_b = int(b / 100 * 65535)
    return [lifx_h, lifx_s, lifx_b, k]

def hsbk_to_rgb(h, s, b, k):
    """Convert HSBK to RGB for color preview (ignores kelvin for now)"""
    if s == 0:  # White light - approximate kelvin to RGB
        if k <= 3000:
            return (255, 180, 107)  # Warm white
        elif k <= 4000:
            return (255, 214, 170)  # Neutral white
        else:
            return (255, 244, 229)  # Cool white
    else:
        # Convert HSB to RGB
        r, g, b_rgb = colorsys.hsv_to_rgb(h/360, s/100, b/100)
        return (int(r*255), int(g*255), int(b_rgb*255))

def rgb_to_ansi(r, g, b):
    """Convert RGB to ANSI color code"""
    return f"\033[38;2;{r};{g};{b}m██\033[0m"

def add_duration_option(f):
    return click.option(
        '--duration', '-d',
        type=float,
        default=0.0,
        show_default=True,
        help='Set transition duration in seconds (default: 0).'
    )(f)

def add_target_options(f):
    f = click.option(
        '--all', '-a',
        'all_lights',
        is_flag=True,
        default=False,
        help='Apply actions to all discovered lights.'
    )(f)
    f = click.option(
        '--group', '-g',
        type=str,
        help='Specify a group name to apply actions.'
    )(f)
    f = click.option(
        '--name', '-n',
        multiple=True,
        help='Specify the name(s) of the light(s) to control.'
    )(f)
    return f

@click.group()
@add_target_options
@click.pass_context
def cli(ctx, all_lights, group, name):
    ctx.ensure_object(dict)
    ctx.obj['all_lights'] = all_lights
    ctx.obj['group'] = group
    ctx.obj['name'] = name

@cli.command(name='list', short_help='List all discovered LIFX lights.')
@click.option('--rescan', '-r',
              is_flag=True,
              default=False,
              help='Invalidate cache and rescan for devices.')
@click.option('--json', '-j',
              'json_output',
              is_flag=True,
              default=False,
              help='Output in JSON format.')
def list_lights(rescan, json_output):
    lifx = LifxLAN()
    cache_file = get_cache_file_path()
    if rescan or not cache_file.exists():
        if not json_output:
            print("Scanning for LIFX devices on the network...")
        lights = lifx.get_lights()
        if not json_output:
            print(f"Discovered {len(lights)} light(s).\n")
        save_cache(cache_file, lights)
    else:
        cached_lights = load_cache(cache_file)
        if cached_lights:
            lights = []
            for light_data in cached_lights:
                try:
                    light = Light(light_data['mac_addr'], light_data['ip_addr'])
                    lights.append(light)
                except:
                    pass
            if not lights:
                if not json_output:
                    print("Cache is empty or corrupted. Rescanning...")
                lights = lifx.get_lights()
                save_cache(cache_file, lights)
                if not json_output:
                    print(f"Discovered {len(lights)} light(s).\n")

    if not lights:
        if json_output:
            click.echo(json.dumps({"lights": []}))
        else:
            print("No LIFX lights found on the network.")
        return

    if json_output:
        light_list = []
        for light in lights:
            try:
                color = light.get_color()
                light_data = {
                    "label": light.get_label(),
                    "ip_address": light.get_ip_addr(),
                    "mac_address": light.get_mac_addr(),
                    "power": "On" if light.get_power() > 0 else "Off",
                    "color": {
                        "hue": round(color[0]/65535*360, 1),
                        "saturation": round(color[1]/65535*100, 1),
                        "brightness": round(color[2]/65535*100, 1),
                        "kelvin": color[3]
                    } if color else None,
                    "brightness": round(color[2]/65535*100 if color else 0, 1)
                }
                light_list.append(light_data)
            except:
                pass
        click.echo(json.dumps(light_list, indent=2))
        return

    for light in lights:
        try:
            label = light.get_label()
            power = "On" if light.get_power() > 0 else "Off"
            color = light.get_color()
            
            if color and power == "On":
                h = color[0]/65535*360
                s = color[1]/65535*100
                b = color[2]/65535*100
                k = color[3]
                
                # Generate color preview
                r, g, b_rgb = hsbk_to_rgb(h, s, b, k)
                color_preview = rgb_to_ansi(r, g, b_rgb)
                
                # Format color info concisely
                if s < 5:  # Essentially white
                    color_info = f"{k}K white"
                else:
                    color_info = f"{h:.0f}°, {s:.0f}%, {k}K"
                
                brightness_str = f"{b:.0f}%"
            else:
                color_preview = "  "  # No color preview when off
                color_info = "Off" if power == "Off" else "Unknown"
                brightness_str = "0%" if power == "Off" else "?"
            
            print(f"{color_preview} {label:<20} {power:<3} {brightness_str:<4} {color_info}")
        except:
            print(f"   {label:<20} ?   ?    Connection failed")

cli.add_command(list_lights, name='l')

@cli.command(name='power', short_help='Set power state of LIFX lights.')
@add_target_options
@add_duration_option
@click.argument('state', type=click.Choice(['on', 'off']))
@click.pass_context
def power(ctx, all_lights, group, name, duration, state):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            light.set_power(state, duration=duration_ms)
            print(f"Set power of '{light.get_label()}' to '{state}'.")
        save_last_used_lights(lights)
    except:
        print("Failed to set power.")
    print("\nAll specified actions have been executed.")

cli.add_command(power, name='p')

@cli.command(name='color', short_help='Set color of LIFX lights.')
@add_target_options
@add_duration_option
@click.argument('color_arg', type=str, required=False)
@click.pass_context
def color(ctx, all_lights, group, name, duration, color_arg):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    
    if not color_arg:
        # Use fzf to select from predefined HSBK colors
        options = []
        max_name_len = max(len(name) for name, _ in HSBK_COLOR_OPTIONS)
        for name, hsbk in HSBK_COLOR_OPTIONS:
            h, s, b, k = map(float, hsbk.split(','))
            r, g, b_rgb = hsbk_to_rgb(h, s, b, k)
            color_preview = rgb_to_ansi(r, g, b_rgb)
            formatted_hsbk = f"{h:>3.0f},{s:>3.0f},{b:>3.0f},{k:>4.0f}"
            options.append(f"{color_preview} {name:<{max_name_len}} - {formatted_hsbk}")
        
        try:
            proc = subprocess.run(
                ['fzf', '--prompt=Select color: ', '--height=20', '--ansi'],
                input='\n'.join(options),
                text=True,
                capture_output=True
            )
            if proc.returncode != 0:
                print("Color selection cancelled.")
                sys.exit(0)
            selected = proc.stdout.strip()
            if selected:
                # Extract HSBK values from selection (after the last ' - ')
                color_arg = selected.split(' - ')[-1]
            else:
                print("No color selected.")
                sys.exit(1)
        except FileNotFoundError:
            print("Error: fzf is required for interactive color selection.")
            print("Install with: brew install fzf")
            sys.exit(1)
        except Exception as e:
            print(f"Error during color selection: {e}")
            sys.exit(1)
    
    if color_arg.endswith('k'):
        color_value = kelvin_to_hsbk(color_arg)
        if not color_value:
            print(f"Invalid kelvin format: '{color_arg}'. Use format like '3500k'.")
            sys.exit(1)
    elif color_arg in PREDEFINED_COLORS:
        color_value = PREDEFINED_COLORS[color_arg]
    elif color_arg.lower() in LIFX_THEMES:
        h, s, b, k = map(float, LIFX_THEMES[color_arg.lower()].split(','))
        color_value = intuitive_to_lifx_hsbk(h, s, b, k)
    else:
        try:
            h, s, b, k = map(float, color_arg.split(','))
            if not (0 <= h <= 360 and 0 <= s <= 100 and 0 <= b <= 100 and 1500 <= k <= 9000):
                print("HSBK values out of range.")
                print("Hue: 0-360°, Saturation: 0-100%, Brightness: 0-100%, Kelvin: 1500-9000")
                sys.exit(1)
            color_value = intuitive_to_lifx_hsbk(h, s, b, k)
        except:
            print(f"Invalid color format: '{color_arg}'. Use one of:")
            print("- Predefined color name (Red, Green, Blue, etc.)")
            print("- Color temperature 'Nk' (e.g., '3500k')")
            print("- HSBK values 'hue,saturation,brightness,kelvin' (0-360°, 0-100%, 0-100%, 1500-9000K)")
            print("- Theme names: sunset, candlelight, fireplace, reading, etc.")
            print("- Run without argument for interactive selection")
            sys.exit(1)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            light.set_color(color_value, duration=duration_ms)
            print(f"Set color of '{light.get_label()}' to '{color_arg}'.")
        save_last_used_lights(lights)
    except:
        print("Failed to set color.")
    print("\nAll specified actions have been executed.")

cli.add_command(color, name='c')

@cli.command(name='brightness', short_help='Set brightness of LIFX lights.')
@add_target_options
@add_duration_option
@click.argument('level', type=click.IntRange(0, 100))
@click.pass_context
def brightness(ctx, all_lights, group, name, duration, level):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                new_brightness = int(level / 100 * 65535)
                new_color = [current_color[0], current_color[1], new_brightness, current_color[3]]
                light.set_color(new_color, duration=duration_ms)
                print(f"Set brightness of '{light.get_label()}' to {level}%.")
            else:
                print(f"Cannot set brightness for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to set brightness.")
    print("\nAll specified actions have been executed.")

cli.add_command(brightness, name='b')

@cli.command(name='warmer', short_help='Make lights warmer (lower kelvin).')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=100)
@click.pass_context
def warmer(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                new_kelvin = max(1500, current_color[3] - amount)
                new_color = [current_color[0], current_color[1], current_color[2], new_kelvin]
                light.set_color(new_color, duration=duration_ms)
                print(f"Made '{light.get_label()}' warmer ({new_kelvin}K).")
            else:
                print(f"Cannot adjust temperature for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust temperature.")
    print("\nAll specified actions have been executed.")

@cli.command(name='cooler', short_help='Make lights cooler (higher kelvin).')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=100)
@click.pass_context
def cooler(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                new_kelvin = min(9000, current_color[3] + amount)
                new_color = [current_color[0], current_color[1], current_color[2], new_kelvin]
                light.set_color(new_color, duration=duration_ms)
                print(f"Made '{light.get_label()}' cooler ({new_kelvin}K).")
            else:
                print(f"Cannot adjust temperature for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust temperature.")
    print("\nAll specified actions have been executed.")

def get_lights(all_lights, group, name):
    cache_file = get_cache_file_path()
    if cache_file.exists():
        cached_lights = load_cache(cache_file)
    else:
        cached_lights = None
    lifx = LifxLAN()
    if cached_lights:
        lights = []
        for light_data in cached_lights:
            try:
                light = Light(light_data['mac_addr'], light_data['ip_addr'])
                lights.append(light)
            except:
                pass
        if not lights:
            print("Cache is empty or corrupted. Scanning for devices...")
            lights = lifx.get_lights()
            save_cache(cache_file, lights)
            print(f"Discovered {len(lights)} light(s).\n")
            save_cache(cache_file, lights)
    else:
        lights = lifx.get_lights()
        print("Scanning for LIFX devices on the network...")
        print(f"Discovered {len(lights)} light(s).\n")
        save_cache(cache_file, lights)
    target_lights = []
    if all_lights:
        target_lights = lights
    elif group:
        # Since lifxlan doesn't provide get_devices_by_group(), we need to filter lights manually
        group_lights = []
        for light in lights:
            try:
                if light.get_group_label() == group:
                    group_lights.append(light)
            except:
                pass
        if not group_lights:
            print(f"No group found with name '{group}'.")
            sys.exit(1)
        target_lights = group_lights
    elif name:
        for n in name:
            matched = [light for light in lights if light.get_label() == n]
            if not matched:
                print(f"Warning: No light found with name '{n}'.")
            else:
                target_lights.extend(matched)
        if not target_lights:
            print("Error: No matching lights found for the specified name(s).")
            sys.exit(1)
    else:
        # Try to use last used lights as default
        last_used = load_last_used_lights()
        if last_used:
            target_lights = last_used
            print(f"Using last used light(s): {', '.join([light.get_label() for light in target_lights])}")
        else:
            print("Error: No target specified and no last used lights found.")
            print("Use --all, --group, or --name to specify target lights.")
            sys.exit(1)
    return lifx, target_lights

if __name__ == "__main__":
    cli()
