#!/usr/bin/env -S uv run --script --quiet
"""Control LIFX smart lights via LAN protocol."""
# /// script
# dependencies = [
#     "click",
#     "lifxlan",
#     "sh",
# ]
# ///


import os
import sys
import json
import sh
import colorsys
from pathlib import Path
from lifxlan import LifxLAN, Light, BLUE, GREEN, RED, YELLOW, ORANGE, PURPLE, CYAN, WHITE
import click

# LIFX App themed colors
LIFX_THEMES = {
    "sunset": "12,75,80,2500",
    "candlelight": "35,100,25,1500",
    "fireplace": "25,100,40,2000",
    "dawn": "25,60,60,3000",
    "reading": "0,0,80,4000",
    "concentrate": "0,0,100,6500",
    "energize": "200,100,100,5500",
    "relax": "240,30,50,2700",
    "sleep": "0,100,5,2000",
    "romantic": "330,70,30,2200",
    "party": "300,100,100,3500",
    "movie": "240,100,20,2700",
    "forest": "120,80,60,3500",
    "ocean": "200,100,70,4000",
    "spring": "90,70,80,4500",
    "autumn": "30,90,70,2800",
}

PREDEFINED_COLORS = {
    "Red": RED,
    "Green": GREEN,
    "Blue": BLUE,
    "Yellow": YELLOW,
    "Orange": ORANGE,
    "Purple": PURPLE,
    "Cyan": CYAN,
    "White": WHITE,
}

HSBK_COLOR_OPTIONS = [
    ("Bright Red", "0,100,100,3500"),
    ("Deep Red", "0,100,50,3500"),
    ("Orange Red", "24,100,100,3500"),
    ("Orange", "48,100,100,3500"),
    ("Golden Yellow", "72,100,100,3500"),
    ("Bright Yellow", "96,100,100,3500"),
    ("Yellow Green", "120,100,100,3500"),
    ("Lime Green", "144,100,100,3500"),
    ("Bright Green", "120,100,100,3500"),
    ("Forest Green", "120,100,50,3500"),
    ("Cyan Green", "168,100,100,3500"),
    ("Aqua Cyan", "180,100,100,3500"),
    ("Sky Blue", "216,100,100,3500"),
    ("Bright Blue", "240,100,100,3500"),
    ("Deep Blue", "240,100,50,3500"),
    ("Royal Blue", "264,100,100,3500"),
    ("Purple Blue", "288,100,100,3500"),
    ("Bright Purple", "300,100,100,3500"),
    ("Deep Purple", "300,100,50,3500"),
    ("Magenta", "324,100,100,3500"),
    ("Pink", "336,50,100,3500"),
    ("Hot Pink", "336,100,100,3500"),
    ("Warm White", "0,0,100,2700"),
    ("Soft White", "0,0,100,3200"),
    ("Daylight White", "0,0,100,5500"),
    ("Cool White", "0,0,100,6500"),
    ("Dim Warm", "0,0,25,2700"),
    ("Cozy Orange", "36,50,70,2700"),
    ("Sunset", "12,75,80,2500"),
    ("Lavender", "280,40,80,3500"),
]

CACHE_FILE_NAME = "lifx.json"
LAST_USED_FILE_NAME = "lifx_last_used.json"

def get_cache_file_path():
    xdg_state_home = os.environ.get('XDG_STATE_HOME', Path.home() / '.local' / 'state')
    cache_dir = Path(xdg_state_home)
    cache_dir.mkdir(parents=True, exist_ok=True)
    cache_file = cache_dir / CACHE_FILE_NAME
    return cache_file

def load_cache(cache_file):
    try:
        with open(cache_file, 'r') as f:
            cached_lights = json.load(f)
        return cached_lights
    except:
        return None

def save_cache(cache_file, lights):
    try:
        with open(cache_file, 'w') as f:
            json.dump([{
                'label': light.get_label(),
                'ip_addr': light.get_ip_addr(),
                'mac_addr': light.get_mac_addr(),
                'power': light.get_power(),
                'color': light.get_color(),
            } for light in lights], f, indent=4)
    except:
        pass

def get_last_used_file_path():
    xdg_state_home = os.environ.get('XDG_STATE_HOME', Path.home() / '.local' / 'state')
    cache_dir = Path(xdg_state_home)
    cache_dir.mkdir(parents=True, exist_ok=True)
    last_used_file = cache_dir / LAST_USED_FILE_NAME
    return last_used_file

def save_last_used_lights(lights):
    try:
        last_used_file = get_last_used_file_path()
        with open(last_used_file, 'w') as f:
            json.dump([{
                'label': light.get_label(),
                'ip_addr': light.get_ip_addr(),
                'mac_addr': light.get_mac_addr(),
            } for light in lights], f, indent=4)
    except:
        pass

def load_last_used_lights():
    try:
        last_used_file = get_last_used_file_path()
        with open(last_used_file, 'r') as f:
            last_used_data = json.load(f)
        lights = []
        for light_data in last_used_data:
            try:
                light = Light(light_data['mac_addr'], light_data['ip_addr'])
                lights.append(light)
            except:
                pass
        return lights
    except:
        return None

def kelvin_to_hsbk(kelvin):
    try:
        kelvin = int(kelvin[:-1])
    except:
        return None
    if kelvin > 9000:
        kelvin = 9000

    if kelvin < 1500:
        # Emulate warmer temperatures with red hue and saturation
        # Map 1000K-1499K to increasing saturation and red hue
        virtual_temp = max(1000, kelvin)
        temp_factor = (1500 - virtual_temp) / 500.0  # 0 to 1 as we go from 1500K to 1000K

        hue = 0  # Red
        saturation = min(100, temp_factor * 80)  # Up to 80% saturation at 1000K
        brightness = 100
        actual_kelvin = 1500  # LIFX hardware limit
        return [hue, saturation, brightness, actual_kelvin]
    else:
        hue = 0
        saturation = 0
        brightness = 100
        return [hue, saturation, brightness, kelvin]

def intuitive_to_lifx_hsbk(h, s, b, k):
    """Convert intuitive HSBK (0-360, 0-100, 0-100, kelvin) to LIFX format (0-65535)"""
    lifx_h = int(h / 360 * 65535)
    lifx_s = int(s / 100 * 65535)
    lifx_b = int(b / 100 * 65535)
    return [lifx_h, lifx_s, lifx_b, k]

def hsbk_to_rgb(h, s, b, k):
    """Convert HSBK to RGB for color preview (ignores kelvin for now)"""
    if s == 0:  # White light - approximate kelvin to RGB
        if k <= 3000:
            return (255, 180, 107)  # Warm white
        elif k <= 4000:
            return (255, 214, 170)  # Neutral white
        else:
            return (255, 244, 229)  # Cool white
    else:
        # Convert HSB to RGB
        r, g, b_rgb = colorsys.hsv_to_rgb(h/360, s/100, b/100)
        return (int(r*255), int(g*255), int(b_rgb*255))

def rgb_to_ansi(r, g, b):
    """Convert RGB to ANSI color code"""
    return f"\033[38;2;{r};{g};{b}m██\033[0m"

def get_virtual_kelvin(current_color):
    """Extract virtual kelvin from current light state, accounting for sub-1500K emulation"""
    current_kelvin = current_color[3]
    current_saturation = current_color[1] / 65535 * 100
    current_hue = current_color[0] / 65535 * 360

    if current_kelvin == 1500 and current_saturation > 5 and abs(current_hue) < 30:
        # Likely emulating sub-1500K temperature
        # Map saturation back to virtual kelvin: 80% sat = 1000K, 0% sat = 1500K
        temp_factor = current_saturation / 80.0
        virtual_kelvin = int(1500 - (temp_factor * 500))
        return max(1000, virtual_kelvin)
    else:
        return current_kelvin

def set_virtual_kelvin(light, virtual_kelvin, current_color, duration_ms):
    """Set light to virtual kelvin temperature, handling sub-1500K emulation"""
    if virtual_kelvin < 1500:
        # Emulate warmer temperature with red hue and saturation
        temp_factor = (1500 - virtual_kelvin) / 500.0
        hue = 0  # Red
        saturation = min(100, temp_factor * 80)
        brightness = current_color[2] / 65535 * 100
        actual_kelvin = 1500

        new_color = intuitive_to_lifx_hsbk(hue, saturation, brightness, actual_kelvin)
        light.set_color(new_color, duration=duration_ms)
        return f"{virtual_kelvin}K (emulated)"
    else:
        # Normal kelvin temperature - revert to pure white
        brightness = current_color[2] / 65535 * 100
        new_color = intuitive_to_lifx_hsbk(0, 0, brightness, virtual_kelvin)  # Pure white
        light.set_color(new_color, duration=duration_ms)
        return f"{virtual_kelvin}K"

def add_duration_option(f):
    return click.option(
        '--duration', '-d',
        type=float,
        default=0.0,
        show_default=True,
        help='Transition duration in seconds'
    )(f)

def add_target_options(f):
    f = click.option(
        '--all', '-a',
        'all_lights',
        is_flag=True,
        default=False,
        help='Apply actions to all discovered lights.'
    )(f)
    f = click.option(
        '--group', '-g',
        type=str,
        help='Specify a group name to apply actions.'
    )(f)
    f = click.option(
        '--name', '-n',
        multiple=True,
        help='Specify the name(s) of the light(s) to control.'
    )(f)
    return f

@click.group(invoke_without_command=True)
@add_target_options
@click.pass_context
def cli(ctx, all_lights, group, name):
    ctx.ensure_object(dict)
    ctx.obj['all_lights'] = all_lights
    ctx.obj['group'] = group
    ctx.obj['name'] = name

    # Check if script was called as 'on' or 'off' (via symlink or argv[0])
    script_name = os.path.basename(sys.argv[0])
    if script_name in ['on', 'off']:
        power_command(all_lights=all_lights, group=group, name=name, duration=0.0, state=script_name)
        return

@cli.command(name='list', short_help='List lights.')
@click.option('--rescan', '-r',
              is_flag=True,
              default=False,
              help='Invalidate cache and rescan for devices.')
def list_lights(rescan):
    lifx = LifxLAN()
    cache_file = get_cache_file_path()
    if rescan or not cache_file.exists():
        lights = lifx.get_lights()
        save_cache(cache_file, lights)
    else:
        cached_lights = load_cache(cache_file)
        if cached_lights:
            lights = []
            for light_data in cached_lights:
                try:
                    light = Light(light_data['mac_addr'], light_data['ip_addr'])
                    lights.append(light)
                except:
                    pass
            if not lights:
                lights = lifx.get_lights()
                save_cache(cache_file, lights)

    if not lights:
        print("No LIFX lights found on the network.")
        return

    for light in lights:
        try:
            label = light.get_label()
            power = "On" if light.get_power() > 0 else "Off"
            color = light.get_color()

            if color and power == "On":
                h = color[0]/65535*360
                s = color[1]/65535*100
                b = color[2]/65535*100
                k = color[3]

                # Generate color preview
                r, g, b_rgb = hsbk_to_rgb(h, s, b, k)
                color_preview = rgb_to_ansi(r, g, b_rgb)

                # Format color info concisely
                if s < 5:  # Essentially white
                    color_info = f"{k}K white"
                else:
                    color_info = f"{h:.0f}°, {s:.0f}%, {k}K"

                brightness_str = f"{b:.0f}%"
            else:
                color_preview = "  "  # No color preview when off
                color_info = "Off" if power == "Off" else "Unknown"
                brightness_str = "0%" if power == "Off" else "?"

            print(f"{color_preview} {label:<20} {power:<3} {brightness_str:<4} {color_info}")
        except:
            print(f"   {label:<20} ?   ?    Connection failed")

@cli.command(name='clear-cache', short_help='Clear device cache.')
def clear_cache():
    """Clear the device cache to force a fresh scan on next use."""
    cache_file = get_cache_file_path()
    last_used_file = get_last_used_file_path()

    files_removed = []
    if cache_file.exists():
        cache_file.unlink()
        files_removed.append("device cache")

    if last_used_file.exists():
        last_used_file.unlink()
        files_removed.append("last used lights")

    if files_removed:
        print(f"Cleared: {', '.join(files_removed)}")
    else:
        print("No cache files found to clear")

@cli.command(name='on', short_help='Turn lights on.')
@add_target_options
@add_duration_option
@click.pass_context
def on(ctx, all_lights, group, name, duration):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    power_command(all_lights=all_lights, group=group, name=name, duration=duration, state='on')

@cli.command(name='off', short_help='Turn lights off.')
@add_target_options
@add_duration_option
@click.pass_context
def off(ctx, all_lights, group, name, duration):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    power_command(all_lights=all_lights, group=group, name=name, duration=duration, state='off')

def power_command(all_lights, group, name, duration, state):
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            light.set_power(state, duration=duration_ms)
            print(f"{light.get_label()}: {state}")
        save_last_used_lights(lights)
    except:
        print("Failed to set power.")

@cli.command(name='color', short_help='Set color.')
@add_target_options
@add_duration_option
@click.argument('color_arg', type=str, required=False)
@click.pass_context
def color(ctx, all_lights, group, name, duration, color_arg):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)

    if not color_arg:
        # Use fzf to select from predefined HSBK colors
        options = []
        max_name_len = max(len(name) for name, _ in HSBK_COLOR_OPTIONS)
        for name, hsbk in HSBK_COLOR_OPTIONS:
            h, s, b, k = map(float, hsbk.split(','))
            r, g, b_rgb = hsbk_to_rgb(h, s, b, k)
            color_preview = rgb_to_ansi(r, g, b_rgb)
            formatted_hsbk = f"{h:>3.0f},{s:>3.0f},{b:>3.0f},{k:>4.0f}"
            options.append(f"{color_preview} {name:<{max_name_len}} - {formatted_hsbk}")

        try:
            # Use sh library for fzf interaction
            fzf = sh.fzf('--prompt=Select color: ', '--height=20', '--ansi', _in='\n'.join(options))
            selected = fzf.strip()
            if selected:
                # Extract HSBK values from selection (after the last ' - ')
                color_arg = selected.split(' - ')[-1]
            else:
                print("No color selected.")
                sys.exit(1)
        except sh.ErrorReturnCode:
            print("Color selection cancelled.")
            sys.exit(0)
        except sh.CommandNotFound:
            print("Error: fzf is required for interactive color selection.")
            print("Install with: brew install fzf")
            sys.exit(1)
        except Exception as e:
            print(f"Error during color selection: {e}")
            sys.exit(1)

    if color_arg.endswith('k'):
        color_value = kelvin_to_hsbk(color_arg)
        if not color_value:
            print(f"Invalid kelvin format: '{color_arg}'. Use format like '3500k'.")
            sys.exit(1)
    elif color_arg in PREDEFINED_COLORS:
        color_value = PREDEFINED_COLORS[color_arg]
    elif color_arg.lower() in LIFX_THEMES:
        h, s, b, k = map(float, LIFX_THEMES[color_arg.lower()].split(','))
        color_value = intuitive_to_lifx_hsbk(h, s, b, k)
    else:
        try:
            h, s, b, k = map(float, color_arg.split(','))
            if not (0 <= h <= 360 and 0 <= s <= 100 and 0 <= b <= 100 and 1500 <= k <= 9000):
                print("HSBK values out of range.")
                print("Hue: 0-360°, Saturation: 0-100%, Brightness: 0-100%, Kelvin: 1500-9000")
                sys.exit(1)
            color_value = intuitive_to_lifx_hsbk(h, s, b, k)
        except:
            print(f"Invalid color format: '{color_arg}'. Use one of:")
            print("- Predefined color name (Red, Green, Blue, etc.)")
            print("- Color temperature 'Nk' (e.g., '3500k')")
            print("- HSBK values 'hue,saturation,brightness,kelvin' (0-360°, 0-100%, 0-100%, 1500-9000K)")
            print("- Theme names: sunset, candlelight, fireplace, reading, etc.")
            print("- Run without argument for interactive selection")
            sys.exit(1)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            light.set_color(color_value, duration=duration_ms)
            pass  # Silently set color
        save_last_used_lights(lights)
    except:
        print("Failed to set color.")


@cli.command(name='brightness', short_help='Set brightness.')
@add_target_options
@add_duration_option
@click.argument('level', type=click.IntRange(0, 100))
@click.pass_context
def brightness(ctx, all_lights, group, name, duration, level):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)  # Convert seconds to milliseconds
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                new_brightness = int(level / 100 * 65535)
                new_color = [current_color[0], current_color[1], new_brightness, current_color[3]]
                light.set_color(new_color, duration=duration_ms)
                pass  # Silently set brightness
            else:
                print(f"Cannot set brightness for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to set brightness.")


@cli.command(name='brighter', short_help='Increase brightness.')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=10)
@click.pass_context
def brighter(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                current_brightness = current_color[2] / 65535 * 100
                new_brightness_pct = min(100, current_brightness + amount)
                new_brightness = int(new_brightness_pct / 100 * 65535)
                new_color = [current_color[0], current_color[1], new_brightness, current_color[3]]
                light.set_color(new_color, duration=duration_ms)
                print(f"{light.get_label()}: {current_brightness:.0f}% → {new_brightness_pct:.0f}%")
            else:
                print(f"Cannot adjust brightness for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust brightness.")

@cli.command(name='dimmer', short_help='Decrease brightness.')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=10)
@click.pass_context
def dimmer(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                current_brightness = current_color[2] / 65535 * 100
                new_brightness_pct = max(0, current_brightness - amount)
                new_brightness = int(new_brightness_pct / 100 * 65535)
                new_color = [current_color[0], current_color[1], new_brightness, current_color[3]]
                light.set_color(new_color, duration=duration_ms)
                print(f"{light.get_label()}: {current_brightness:.0f}% → {new_brightness_pct:.0f}%")
            else:
                print(f"Cannot adjust brightness for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust brightness.")

@cli.command(name='warmer', short_help='Make warmer.')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=100)
@click.pass_context
def warmer(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                virtual_kelvin = get_virtual_kelvin(current_color)
                new_virtual_kelvin = max(1000, virtual_kelvin - amount)

                temp_display = set_virtual_kelvin(light, new_virtual_kelvin, current_color, duration_ms)
                print(f"{light.get_label()}: {temp_display}")
            else:
                print(f"Cannot adjust temperature for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust temperature.")

@cli.command(name='cooler', short_help='Make cooler.')
@add_target_options
@add_duration_option
@click.argument('amount', type=int, default=100)
@click.pass_context
def cooler(ctx, all_lights, group, name, duration, amount):
    all_lights = all_lights or ctx.obj.get('all_lights')
    group = group or ctx.obj.get('group')
    name = name or ctx.obj.get('name')
    lifx, lights = get_lights(all_lights, group, name)
    duration_ms = int(duration * 1000)
    try:
        for light in lights:
            current_color = light.get_color()
            if current_color:
                virtual_kelvin = get_virtual_kelvin(current_color)
                new_virtual_kelvin = min(9000, virtual_kelvin + amount)

                temp_display = set_virtual_kelvin(light, new_virtual_kelvin, current_color, duration_ms)
                print(f"{light.get_label()}: {temp_display}")
            else:
                print(f"Cannot adjust temperature for '{light.get_label()}' as color information is unavailable.")
        save_last_used_lights(lights)
    except:
        print("Failed to adjust temperature.")

def get_lights(all_lights, group, name):
    cache_file = get_cache_file_path()
    lifx = LifxLAN()

    # Auto-scan if no cache exists
    if not cache_file.exists():
        lights = lifx.get_lights()
        save_cache(cache_file, lights)
    else:
        cached_lights = load_cache(cache_file)
        if cached_lights:
            lights = []
            for light_data in cached_lights:
                try:
                    light = Light(light_data['mac_addr'], light_data['ip_addr'])
                    lights.append(light)
                except:
                    pass
            if not lights:
                lights = lifx.get_lights()
                save_cache(cache_file, lights)
        else:
            lights = lifx.get_lights()
            save_cache(cache_file, lights)
    target_lights = []
    if all_lights:
        target_lights = lights
    elif group:
        # Since lifxlan doesn't provide get_devices_by_group(), we need to filter lights manually
        group_lights = []
        for light in lights:
            try:
                if light.get_group_label() == group:
                    group_lights.append(light)
            except:
                pass
        if not group_lights:
            print(f"No group found with name '{group}'.")
            sys.exit(1)
        target_lights = group_lights
    elif name:
        for n in name:
            matched = [light for light in lights if light.get_label() == n]
            if not matched:
                print(f"Warning: No light found with name '{n}'.")
            else:
                target_lights.extend(matched)
        if not target_lights:
            print("Error: No matching lights found for the specified name(s).")
            sys.exit(1)
    else:
        # Try to use last used lights as default
        last_used = load_last_used_lights()
        if last_used:
            target_lights = last_used
            pass  # Silently use last used lights
        else:
            print("Error: No target specified and no last used lights found.")
            print("Use --all, --group, or --name to specify target lights.")
            sys.exit(1)
    return lifx, target_lights

if __name__ == "__main__":
    cli()
