#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source :rubygems
  gem 'ferrum', '~> 0.13'
  gem 'nokogiri', '~> 1'
  gem 'terminal-notifier', '~> 2'
end

USERNAME = ARGV[0]
PASSWORD = ARGV[1]
CHECK_INTERVAL = 1 * 60

def extract_relevant_content(html)
  doc = Nokogiri::HTML(html)
  doc.css('tr.athing.comtr').map do |node|
    id = node['id']
    user = node.at_css('.hnuser')&.text&.strip
    score = node.at_css('.score')&.text&.strip
    upvotes = node.at_css('.score')&.text&.match(/\d+/)&.to_a&.first&.to_i
    text = node.at_css('.commtext')&.text&.strip
    replies = node.css('.comhead ~ .comment').map { |reply| { text: reply.at_css('.commtext')&.text&.strip } }
    { id: id, user: user, score: score, text: text, upvotes: upvotes, replies: replies }
  end
end

browser = Ferrum::Browser.new

begin
  browser.goto 'https://news.ycombinator.com/login'
  browser.at_css('input[name="acct"]').focus.type(USERNAME)
  browser.at_css('input[name="pw"]').focus.type(PASSWORD)
  browser.at_css('input[type="submit"]').click
  browser.network.wait_for_idle

  previous_comments = extract_relevant_content(browser.body)
  initial_run = true

  loop do
    browser.goto "https://news.ycombinator.com/threads?id=#{USERNAME}"
    current_comments = extract_relevant_content(browser.body)

    new_activities = if initial_run
                       []
                     else
                       current_comments.reject do |current_comment|
                         previous_comment = previous_comments.find { |prev_comment| prev_comment[:id] == current_comment[:id] }
                         if previous_comment.nil?
                           false
                         else
                           previous_comment[:upvotes] >= current_comment[:upvotes] &&
                             previous_comment[:replies].count == current_comment[:replies].count
                         end
                       end
                     end

    if new_activities.any?
      new_activities.each do |activity|
        message = "New activity: #{activity[:score]} (#{activity[:upvotes]} upvotes)"
        message += " - #{activity[:text]}" unless activity[:text].empty?
        message += "\nReplies:\n#{activity[:replies].map { |reply| "- #{reply[:text]}" }.join("\n")}" if activity[:replies].any?
        TerminalNotifier.notify(message, title: 'Hacker News Alert')
      end
      puts 'New activities detected. Notifications sent.'
    else
      puts 'No new activities detected.'
    end

    previous_comments = current_comments
    initial_run = false
    sleep CHECK_INTERVAL
  end
ensure
  browser.quit
end
