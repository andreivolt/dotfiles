#!/usr/bin/env python3

import os
import sys
import re
import subprocess
import shutil
from pathlib import Path

def get_mime_type(filepath):
    ext = filepath.suffix.lower()
    mime_types = {
        '.pdf': 'application/pdf',
        '.epub': 'application/epub+zip',
    }
    return mime_types.get(ext, 'application/octet-stream')

def format_author_name(author):
    if not author or author == "Unknown":
        return author

    parts = author.split()
    if len(parts) < 2:
        return author

    last = parts[-1]
    first_middle = ' '.join(parts[:-1])
    return f"{last}, {first_middle}"

def format_title(title):
    # If title is all caps, convert to title case
    if title.isupper():
        # List of words that should stay lowercase in titles
        lowercase_words = {'a', 'an', 'the', 'and', 'but', 'or', 'for', 'nor',
                          'on', 'at', 'to', 'from', 'by', 'of', 'in', 'with', 'as'}

        words = title.split()
        formatted_words = []

        for i, word in enumerate(words):
            # First word and words after colons/semicolons are always capitalized
            if i == 0 or (i > 0 and words[i-1][-1] in ':;'):
                formatted_words.append(word.capitalize())
            # Check if it's an acronym (like PDF, HTML, etc) - keep uppercase if 2-4 chars
            elif 2 <= len(word) <= 4 and word.isalpha():
                formatted_words.append(word)
            # Lowercase words stay lowercase unless at start
            elif word.lower() in lowercase_words:
                formatted_words.append(word.lower())
            else:
                formatted_words.append(word.capitalize())

        return ' '.join(formatted_words)

    return title

def inspect_file_with_llm(filepath):
    print("Using LLM to determine ebook metadata...")

    prompt = """Analyze this ebook content and extract the metadata.

Return ONLY a single line response in this EXACT format:
AUTHOR: Last, First | TITLE: Full Book Title

Rules:
- Author must be in "Last, First" format (e.g., "Smith, John")
- If multiple authors, use only the first one
- Include the complete book title
- If author is unknown, use "Unknown"
- Do not include any other text, just the formatted line"""

    # For EPUB files, extract text first
    if filepath.suffix.lower() == '.epub':
        print("Converting EPUB to text...")
        text_cmd = ["2text", str(filepath)]
        text_result = subprocess.run(text_cmd, capture_output=True, text=True)
        
        if text_result.returncode != 0:
            print(f"Error converting EPUB: {text_result.stderr}")
            return None
        
        # Get first 5000 characters for analysis
        content = text_result.stdout[:5000]
        
        cmd = ["uvx", "-q", "--with", "llm-anthropic,llm-gemini", "llm", "prompt", prompt]
        
        try:
            result = subprocess.run(cmd, input=content, capture_output=True, text=True)
        except Exception as e:
            print(f"Error running LLM: {e}")
            return None
    else:
        # For PDFs, use attachment
        mime_type = get_mime_type(filepath)
        cmd = ["uvx", "-q", "--with", "llm-anthropic,llm-gemini", "llm", "prompt",
               "--at", str(filepath), mime_type, prompt]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
        except Exception as e:
            print(f"Error running LLM: {e}")
            return None

    if result.returncode == 0:
        output = result.stdout.strip()
        match = re.match(r'AUTHOR:\s*(.+?)\s*\|\s*TITLE:\s*(.+)', output)
        if match:
            return {
                'author': match.group(1).strip(),
                'title': match.group(2).strip()
            }

    print(f"LLM output: {result.stdout.strip()}")
    if result.stderr:
        print(f"Error: {result.stderr.strip()}")
    return None

def sanitize_filename(filename):
    # Replace problematic characters for filesystems
    replacements = {
        '/': '-',
        '\\': '-',
        ':': ' -',
        '*': '',
        '?': '',
        '"': "'",
        '<': '',
        '>': '',
        '|': '-',
        '\n': ' ',
        '\r': ' ',
        '\t': ' '
    }
    
    for old, new in replacements.items():
        filename = filename.replace(old, new)
    
    # Remove multiple spaces and trim
    filename = ' '.join(filename.split())
    
    # Ensure filename isn't too long (max 255 chars including extension)
    max_length = 240  # Leave room for extension
    if len(filename) > max_length:
        filename = filename[:max_length].rstrip()
    
    return filename

def generate_new_filename(metadata, extension):
    if not metadata or not metadata.get('title'):
        return None

    author = metadata.get('author', 'Unknown')
    if author != 'Unknown':
        author = format_author_name(author)

    title = format_title(metadata['title'])
    filename = f"{author} - {title}"
    filename = sanitize_filename(filename)
    return f"{filename}{extension}"

def main():
    if len(sys.argv) < 2 or '--help' in sys.argv or '-h' in sys.argv:
        print(f"Usage: {sys.argv[0]} <ebook_file> [--dry-run]")
        print("       Renames a single ebook file (PDF, EPUB) to 'Author, First - Title.ext' format")
        print()
        print("Options:")
        print("  --dry-run      Show what would be renamed without actually renaming")
        sys.exit(1)

    filepath = None
    dry_run = '--dry-run' in sys.argv

    for arg in sys.argv[1:]:
        if not arg.startswith('--'):
            filepath = Path(arg).resolve()
            break

    if not filepath:
        print("Error: No file specified")
        sys.exit(1)

    if not filepath.exists():
        print(f"Error: File '{filepath}' does not exist")
        sys.exit(1)

    if filepath.suffix.lower() not in ['.pdf', '.epub']:
        print("Error: File must be a PDF or EPUB file")
        sys.exit(1)

    metadata = inspect_file_with_llm(filepath)

    new_basename = generate_new_filename(metadata, filepath.suffix)

    if new_basename and new_basename != filepath.name:
        new_filepath = filepath.parent / new_basename

        if dry_run:
            print(f"Would rename: {filepath.name} → {new_basename}")
        else:
            if new_filepath.exists():
                print(f"Error: Target file already exists: {new_basename}")
                sys.exit(1)
            else:
                shutil.move(str(filepath), str(new_filepath))
                print(f"Renamed: {filepath.name} → {new_basename}")
    else:
        print(f"Unable to determine new name for: {filepath.name}")
        sys.exit(1)

if __name__ == "__main__":
    main()
