#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'cgi'
require 'io/console'
require 'optparse'
require 'uri'

def fetch_item(item_id)
  JSON.parse(Net::HTTP.get(URI("https://hacker-news.firebaseio.com/v0/item/#{item_id}.json")))
rescue
  nil
end

def wrap_text(text, width)
  text.split("\n").collect do |line|
    line.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n").strip
  end * "\n"
end

def build_comment_tree(item_id, parent_author = nil)
  item = fetch_item(item_id)
  return unless item && (item['type'] == 'comment' || item['type'] == 'story')

  if item['type'] == 'comment'
    {
      id: item_id,
      author: item['by'],
      parent: item['parent'],
      parent_author: parent_author,
      text: item['text'] ? CGI.unescapeHTML(item['text']) : '[Deleted or Missing Text]',
      children: item['kids'] ? item['kids'].map { |kid_id| build_comment_tree(kid_id, item['by']) }.compact : []
    }
  else
    {
      id: item_id,
      title: item['title'],
      children: item['kids'] ? item['kids'].map { |kid_id| build_comment_tree(kid_id) }.compact : []
    }
  end
end

def print_comment_tree(item_id, level = 0, is_last = false, parent_author = nil, terminal_width = 80, json_output = false, prefix = '')
  item = fetch_item(item_id)
  return unless item && (item['type'] == 'comment' || item['type'] == 'story')

  indent_width = prefix.length + 3
  wrap_width = terminal_width - indent_width > 20 ? terminal_width - indent_width : 20
  current_prefix = prefix + (is_last ? '└─ ' : '├─ ')

  if item['type'] == 'comment'
    parent_str = parent_author ? "in reply to [id:#{item['parent']}] by #{parent_author}" : "as top-level comment"
    comment_text = item['text'] ? CGI.unescapeHTML(item['text']) : '[Deleted or Missing Text]'
    formatted_comment = wrap_text(comment_text, wrap_width).gsub("\n", "\n#{prefix}#{is_last ? '   ' : '│  '}")

    if json_output
      puts JSON.generate(item)
    else
      puts "#{current_prefix}[id:#{item_id}] by #{item['by']} #{parent_str}:"
      puts "#{prefix}#{is_last ? '   ' : '│  '}#{formatted_comment}"
      puts "#{prefix}#{is_last ? '   ' : '│'}"  # Add a blank line with the appropriate connector
    end
  else
    if json_output
      puts JSON.generate(item)
    else
      puts "#{current_prefix}Story: #{item['title']}"
    end
  end

  if item['kids']
    last_index = item['kids'].length - 1
    item['kids'].each_with_index do |kid_id, index|
      next_prefix = prefix + (is_last ? '   ' : '│  ')
      print_comment_tree(kid_id, level + 1, index == last_index, item['by'], terminal_width, json_output, next_prefix)
    end
  end
end

def extract_id_from_url(url)
  query_string = URI.parse(url).query
  return nil unless query_string

  params = URI.decode_www_form(query_string).to_h
  params['id']
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: hn_comments.rb [options] <item_id_or_url>"

  opts.on("--json", "Output comments as JSON")
end.parse!(into: options)

input = ARGV[0]
if input.nil?
  abort "Please provide a Hacker News item ID or URL."
end

item_id = input.include?("http") ? extract_id_from_url(input) : input.to_i
terminal_width = IO.console.winsize[1]

item = fetch_item(item_id)
if item && (item['type'] == 'story' || item['type'] == 'comment')
  if options[:json]
    comment_tree = build_comment_tree(item_id)
    puts JSON.pretty_generate(comment_tree)
  else
    print_comment_tree(item_id, 0, true, nil, terminal_width)
  end
else
  abort "Item not found or invalid ID/URL."
end
