#!/usr/bin/env ruby

SETUP_SCRIPTS = {
  'boot_sound_disable' => -> {
    puts "Disabling boot sound..."
    system("sudo nvram SystemAudioVolume=%80")
    puts "Boot sound disabled"
  },

  'brotab_install' => -> {
    puts "Installing brotab..."
    target_file = "#{ENV['HOME']}/Library/Application Support/Google/Chrome/NativeMessagingHosts/brotab_mediator.json"

    unless File.exist?(target_file)
      system("bt install")
      system("mv ~/.config/google-chrome/NativeMessagingHosts/brotab_mediator.json '#{File.dirname(target_file)}'")
      puts "Brotab installed"
    else
      puts "Brotab already installed"
    end
  },

  'display_battery_dim_disable' => -> {
    puts "Disabling display dimming on battery..."
    system("sudo pmset -b lessbright 0")
    puts "Display battery dimming disabled"
  },

  'caps_to_escape' => -> {
    puts "Setting up Caps Lock to Escape mapping..."
    system('hidutil property --set \'{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x700000029}]}\'')
    puts "Caps Lock mapped to Escape"
  },

  'dock_defaults_remove' => -> {
    puts "Removing default Dock apps..."
    system("defaults write com.apple.dock persistent-apps -array")
    system("pkill -f MacOS/Dock || killall Dock")
    puts "Default Dock apps removed"
  },

  'homebrew_install' => -> {
    puts "Installing Homebrew..."
    if system("command -v brew >/dev/null 2>&1")
      puts "Homebrew already installed"
      return
    end

    system('/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"')
    puts "Homebrew installed"
  },

  'launchpad_reset' => -> {
    puts "Resetting Launchpad..."
    system("defaults write com.apple.dock ResetLaunchPad -bool true")
    system("killall Dock")
    puts "Launchpad reset"
  },

  'menu_bar_spacing' => -> {
    puts "Setting up menu bar spacing..."
    system("defaults write -globalDomain NSStatusItemSelectionPadding -int 6")
    system("defaults write -globalDomain NSStatusItemSpacing -int 6")
    puts "Menu bar spacing configured"
  },

  'ssh_enable' => -> {
    puts "Enabling and securing SSH..."

    remote_login = `systemsetup -getremotelogin 2>/dev/null`.match(/On|Off/)[0] rescue "Off"
    if remote_login == "On"
      puts "SSH already enabled"
    else
      system("sudo systemsetup -setremotelogin on")
      puts "SSH enabled"
    end

    sshd_config = File.read("/etc/ssh/sshd_config") rescue ""
    if sshd_config.include?("PasswordAuthentication no") && sshd_config.include?("KbdInteractiveAuthentication no")
      puts "SSH already secured"
    else
      system('sudo /usr/bin/sed -i \'\' -e \'s/#PasswordAuthentication yes/PasswordAuthentication no/\' -e \'s/#KbdInteractiveAuthentication yes/KbdInteractiveAuthentication no/\' -e \'s/^PasswordAuthentication yes/PasswordAuthentication no/\' -e \'s/^KbdInteractiveAuthentication yes/KbdInteractiveAuthentication no/\' /etc/ssh/sshd_config')
      puts "SSH secured"
    end
  },

  'mkcert_setup' => -> {
    puts "Setting up mkcert for local SSL certificates..."
    
    if system("command -v mkcert >/dev/null 2>&1")
      puts "mkcert already installed"
    else
      puts "mkcert not found, install it with: brew install mkcert"
      return
    end

    ca_root = `mkcert -CAROOT`.strip
    if File.exist?("#{ca_root}/rootCA.pem")
      puts "mkcert CA already installed"
    else
      puts "Installing mkcert CA (requires sudo)..."
      system("mkcert -install")
      puts "mkcert CA installed"
    end
  }

  # 'keyboard_layout_install' => -> {
  #   puts "Installing custom French PC keyboard layout..."
  #   system("cp -r ~/Documents/fr-pc-nodeadkeys.bundle ~/Library/Keyboard\\ Layouts")
  #   system('defaults write ~/Library/Preferences/com.apple.HIToolbox.plist AppleCurrentKeyboardLayoutInputSourceID -string "fr-pc-nodeadkeys"')
  #   puts "Custom keyboard layout installed"
  # }
}

puts "Running Mac setup..."
SETUP_SCRIPTS.keys.sort.each do |script_name|
  SETUP_SCRIPTS[script_name].call
end
puts "Mac setup completed!"
