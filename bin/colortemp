#!/usr/bin/env bb

(require '[clojure.java.io :as io])
(require '[babashka.process :refer [process]])

(def config-dir (io/file (System/getProperty "user.home") ".config" "colortemp"))
(def temp-file-path (io/file config-dir "current-temp"))

(def MAX 6500)
(def MIN 1000)
(def INCR 100)

(defn update-temperature
  [current action]
  (let [new-temp (if action (action current INCR) current)]
    (max (min new-temp MAX) MIN)))

(defn read-temperature
  []
  (if (.exists temp-file-path) (Integer/parseInt (slurp temp-file-path)) MIN))

(defn write-temperature [temp]
  (io/make-parents temp-file-path)
  (spit temp-file-path (str temp)))

(defn adjust-temperature
  [temp]
  (let [os-name (System/getProperty "os.name")]
    (if (.startsWith os-name "Mac")
      (do
        (doseq [i ["dayColorTemp" "nightColorTemp" "lateColorTemp"]]
          (process ["defaults" "write" "org.herf.Flux" i "-int" (str temp)]))
        (process ["pkill" "Flux"])
        (process ["open" "-a" "Flux"]))
      (do
        @(process ["pkill" "gammastep"])
        (process ["gammastep" "-O" temp])
        (process ["notify-send" (str temp) "--expire-time" "500"])))))

(defn set-temperature
  [temp]
  (adjust-temperature temp)
  (write-temperature temp)
  temp)

(let
  [current-temp (read-temperature)
   new-temp
   (if-let [temp (try (Integer/parseInt (first *command-line-args*))
                      (catch Exception _ nil))]
     (if (and (<= MIN temp) (<= temp MAX))
       (set-temperature temp)
       (do (println "Temperature should be between" MIN "and" MAX)
           current-temp))
     (let [action (get {"up" +, "down" -} (first *command-line-args*))]
       (if action
         (set-temperature (update-temperature current-temp action))
         (do
           (println
            "Invalid command-line argument. Use 'up' or 'down' to adjust the temperature.")
           current-temp))))]
  (println (str "New temperature: " new-temp)))
