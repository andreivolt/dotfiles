#!/usr/bin/env -S uv run --script --quiet
# /// script
# dependencies = [
#   "timeago",
#   "requests"
# ]
# ///

import json
import os
import sys
import subprocess
import base64
import timeago
from datetime import datetime
import requests

# Check for fzf
try:
    subprocess.run(["which", "fzf"], check=True, capture_output=True)
except subprocess.CalledProcessError:
    print("Error: fzf is not installed. Please install it first.")
    sys.exit(1)

# Environment variables
auth_key = os.getenv('TAILSCALE_API_KEY')
tailscale_org = os.getenv('TAILSCALE_ORG')
tailscale_net = os.getenv('TAILSCALE_NET')

if not all([auth_key, tailscale_org, tailscale_net]):
    print("Error: Required environment variables not set.")
    print("Please set TAILSCALE_API_KEY, TAILSCALE_ORG, and TAILSCALE_NET.")
    sys.exit(1)

api_base_url = "https://api.tailscale.com/api/v2"

def api_request(url, method='GET'):
    auth_header = base64.b64encode(f"{auth_key}:".encode()).decode()
    headers = {
        'Authorization': f'Basic {auth_header}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    response = requests.request(method, url, headers=headers)
    return response.status_code, response.text

def time_ago_in_words(time_str):
    if not time_str:
        return 'Never'
    
    try:
        if isinstance(time_str, str) and time_str.isdigit():
            # Unix timestamp as string
            timestamp = int(time_str)
            if timestamp > 1e12:  # Likely nanoseconds
                time_obj = datetime.fromtimestamp(timestamp / 1e9)
            else:  # Likely seconds
                time_obj = datetime.fromtimestamp(timestamp)
        elif isinstance(time_str, (int, float)):
            # Handle large timestamps (possibly nanoseconds)
            if time_str > 1e12:  # Likely nanoseconds
                time_obj = datetime.fromtimestamp(time_str / 1e9)
            else:  # Likely seconds
                time_obj = datetime.fromtimestamp(time_str)
        else:
            # ISO format string - convert to timezone-naive
            time_obj = datetime.fromisoformat(str(time_str).replace('Z', '+00:00')).replace(tzinfo=None)
        
        return timeago.format(time_obj, datetime.now())
    except:
        return 'unknown'

# Get all devices
status_code, response_body = api_request(f"{api_base_url}/tailnet/{tailscale_org}/devices")

if status_code != 200:
    print(f"Error: Failed to fetch devices. HTTP Status Code: {status_code}")
    sys.exit(1)

devices = json.loads(response_body)['devices']

if not devices:
    print("No devices found.")
    sys.exit(0)

# Prepare device list for fzf
device_list = []
for device in devices:
    last_seen = time_ago_in_words(device.get('lastSeen'))
    device_list.append(f"{device['name']} - Last seen: {last_seen} ({device['id']})")

# Use fzf to select devices
fzf_input = '\n'.join(device_list)
try:
    result = subprocess.run(
        ['fzf', '--multi', '--header=Select devices to delete (TAB to select multiple, ENTER to confirm)'],
        input=fzf_input,
        text=True,
        capture_output=True,
        check=True
    )
    selected_devices = result.stdout.strip()
except subprocess.CalledProcessError:
    print("No devices selected or fzf error occurred.")
    sys.exit(1)

if not selected_devices:
    print("No devices selected.")
    sys.exit(1)

# Process selected devices
for device_line in selected_devices.split('\n'):
    # Extract device name and ID from the line
    if ' - Last seen: ' in device_line and device_line.endswith(')'):
        device_name = device_line.split(' - Last seen: ')[0]
        device_id = device_line.split('(')[-1].rstrip(')')
    else:
        print(f"Error: Could not parse device line: {device_line}")
        continue
    
    print(f"Deleting device: {device_name}...")
    status_code, _ = api_request(f"{api_base_url}/device/{device_id}", 'DELETE')
    
    if status_code == 200:
        print(f"✓ Device '{device_name}' deleted successfully.")
    else:
        print(f"✗ Error: Failed to delete device '{device_name}'. HTTP Status Code: {status_code}")