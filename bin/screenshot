#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! tempfile = "3.8.1"
//! is-terminal = "0.4.10"
//! ```

use std::env;
use std::fs;
use std::io;
use std::io::Write;
use std::path::{Path, PathBuf};
use std::process::{Command, exit};
use is_terminal::IsTerminal;

const USAGE: &str = "Usage:
  screenshot (selection | window | full) [<filename>]";

#[cfg(target_os = "macos")]
const OS_NAME: &str = "darwin";
#[cfg(target_os = "linux")]
const OS_NAME: &str = "linux";
#[cfg(not(any(target_os = "macos", target_os = "linux")))]
const OS_NAME: &str = "unsupported";

fn main() -> io::Result<()> {
    let mut args: Vec<String> = env::args().skip(1).collect();

    // Default to "selection" if no target specified
    if args.is_empty() || args.last().unwrap_or(&String::new()).ends_with(".png") {
        if !args.iter().any(|arg| ["selection", "window", "full"].contains(&arg.as_ref())) {
            args.insert(0, "selection".to_string());
        }
    }

    if args.is_empty() {
        println!("{}", USAGE);
        exit(1);
    }

    // Get filename if specified
    let filename = if args.len() > 1 && args.last().unwrap().ends_with(".png") {
        Some(args.last().unwrap().clone())
    } else {
        None
    };

    // Determine output type
    let output = if filename.is_some() {
        "file"
    } else if io::stdout().is_terminal() {
        "clipboard"
    } else {
        "stdout"
    };

    // Get target type
    let target_str = args[0].as_str();
    let target_str = if ["selection", "window", "full"].contains(&target_str) {
        target_str
    } else {
        "selection"
    };

    // Map target to OS-specific options
    let capture_option = match (target_str, OS_NAME) {
        ("selection", "darwin") => "-i",
        ("window", "darwin") => "-W",
        ("full", "darwin") => "",
        ("selection", "linux") => "area",
        ("window", "linux") => "window",
        ("full", "linux") => "screen",
        _ => {
            println!("Unsupported OS");
            exit(1);
        }
    };

    let mut file_path = PathBuf::new();

    if output == "clipboard" && OS_NAME == "darwin" {
        // Take screenshot directly to clipboard on macOS
        let capture_command = format!("screencapture -c {}", capture_option);
        Command::new("sh").args(["-c", &capture_command]).status()?;
    } else {
        // Create a temporary file for the screenshot
        let temp_file = tempfile::Builder::new()
            .prefix("screenshot-")
            .suffix(".png")
            .tempfile()?;
        file_path = temp_file.path().to_path_buf();
        let temp_path = file_path.to_string_lossy();

        // Take the screenshot to the temp file
        let capture_command = if OS_NAME == "darwin" {
            format!("screencapture {} {}", capture_option, temp_path)
        } else {
            format!("grimshot save {} {}", capture_option, temp_path)
        };
        Command::new("sh").args(["-c", &capture_command]).status()?;

        // Handle the output based on the chosen mode
        if output == "stdout" {
            let content = fs::read(&file_path)?;
            io::stdout().write_all(&content)?;
        } else if output == "file" {
            if let Some(fname) = filename {
                fs::rename(&file_path, &fname)?;
                file_path = Path::new(&fname).canonicalize()?;
            }
        }
    }

    // Show notification if not writing to stdout
    if output != "stdout" {
        if OS_NAME == "darwin" {
            let file_path_str = file_path.to_string_lossy();
            let notification_command = format!(
                "terminal-notifier -title 'Screenshot' -message 'Screenshot taken' -open 'file://{}' -contentImage '{}'",
                file_path_str, file_path_str
            );
            Command::new("sh").args(["-c", &notification_command]).status()?;
        } else {
            Command::new("sh")
                .args(["-c", "notify-send 'Screenshot' 'Screenshot taken'"])
                .status()?;
        }
    }

    Ok(())
}
