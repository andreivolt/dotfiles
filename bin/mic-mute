#!/usr/bin/env scriptisto
# Claude: use better icons or mute/unmute

// scriptisto-begin
// script_src: script.swift
// build_cmd: swiftc -O script.swift -o script
// scriptisto-end

import Foundation
import AudioToolbox

func toggleDefaultInputDeviceMute() {
    var defaultInputDeviceID = AudioDeviceID(0)
    var propertySize = UInt32(MemoryLayout<AudioDeviceID>.size)

    var propertyAddress = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDefaultInputDevice,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)

    let getDeviceStatus = AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject),
        &propertyAddress,
        0,
        nil,
        &propertySize,
        &defaultInputDeviceID)

    guard getDeviceStatus == noErr && defaultInputDeviceID != kAudioObjectUnknown else {
        showMessage("‚ùå No microphone found")
        return
    }

    var mute: UInt32 = 0
    propertySize = UInt32(MemoryLayout<UInt32>.size)

    var mutePropertyAddress = AudioObjectPropertyAddress(
        mSelector: kAudioDevicePropertyMute,
        mScope: kAudioDevicePropertyScopeInput,
        mElement: kAudioObjectPropertyElementMain)

    let getMuteStatus = AudioObjectGetPropertyData(defaultInputDeviceID,
        &mutePropertyAddress,
        0,
        nil,
        &propertySize,
        &mute)

    guard getMuteStatus == noErr else {
        showMessage("‚ùå Cannot read microphone status")
        return
    }

    var newMuteValue: UInt32 = mute == 0 ? 1 : 0

    let setMuteStatus = AudioObjectSetPropertyData(defaultInputDeviceID,
        &mutePropertyAddress,
        0,
        nil,
        propertySize,
        &newMuteValue)

    if setMuteStatus == noErr {
        let message = newMuteValue == 0 ? "üé§ Microphone unmuted" : "üîá Microphone muted"
        showMessage(message)
    } else {
        showMessage("‚ùå Failed to toggle microphone")
    }
}

func showMessage(_ message: String) {
    let task = Process()
    task.launchPath = "/opt/homebrew/bin/hs"
    task.arguments = ["-c", "hs.alert.closeAll(); hs.alert.show('\(message)', 1.5)"]
    task.launch()
    task.waitUntilExit()
}

toggleDefaultInputDeviceMute()
