#!/usr/bin/env -S uv run --script --quiet
"""Extract text from images using macOS Vision framework."""
# /// script
# dependencies = [
#   "pyobjc-core==10.3",
#   "pyobjc-framework-Quartz==10.3",
#   "pyobjc-framework-Vision==10.3",
#   "pyobjc==10.3",
#   "sh==2.0.6",
#   "wurlitzer==3.1",
#   "pyperclip==1.8.2",
# ]
# ///


import pathlib
import sys
import sh

def image_to_text_from_path(img_path, lang="eng"):
    import Quartz
    import Vision
    from Cocoa import NSURL
    from Foundation import NSDictionary
    from wurlitzer import pipes

    input_url = NSURL.fileURLWithPath_(img_path)

    with pipes() as (out, err):
        input_image = Quartz.CIImage.imageWithContentsOfURL_(input_url)

    vision_options = NSDictionary.dictionaryWithDictionary_({})
    vision_handler = Vision.VNImageRequestHandler.alloc().initWithCIImage_options_(
        input_image, vision_options
    )
    results = []
    handler = make_request_handler(results)
    vision_request = Vision.VNRecognizeTextRequest.alloc().initWithCompletionHandler_(handler)
    error = vision_handler.performRequests_error_([vision_request], None)

    return results

def image_to_text_from_data(img_data, lang="eng"):
    import Quartz
    import Vision
    from Foundation import NSDictionary, NSData
    from wurlitzer import pipes

    ns_data = NSData.dataWithBytes_length_(img_data, len(img_data))

    with pipes() as (out, err):
        input_image = Quartz.CIImage.imageWithData_(ns_data)

    vision_options = NSDictionary.dictionaryWithDictionary_({})
    vision_handler = Vision.VNImageRequestHandler.alloc().initWithCIImage_options_(
        input_image, vision_options
    )
    results = []
    handler = make_request_handler(results)
    vision_request = Vision.VNRecognizeTextRequest.alloc().initWithCompletionHandler_(handler)
    error = vision_handler.performRequests_error_([vision_request], None)

    return results

def make_request_handler(results):
    """ results: list to store results """
    if not isinstance(results, list):
        raise ValueError("results must be a list")

    def handler(request, error):
        if error:
            print(f"Error! {error}")
        else:
            observations = request.results()
            for text_observation in observations:
                recognized_text = text_observation.topCandidates_(1)[0]
                results.append([recognized_text.string(), recognized_text.confidence()])
    return handler

import argparse

parser = argparse.ArgumentParser(description=__doc__.strip(), formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('image_path', nargs='?',
                   help='Path to image file (use - for stdin)')
parser.add_argument('-c', '--copy', action='store_true',
                   help='Copy text to clipboard')

args = parser.parse_args()

if args.image_path == '-' or (not args.image_path and not sys.stdin.isatty()):
    # Read from stdin
    img_data = sys.stdin.buffer.read()
    results = image_to_text_from_data(img_data)
elif args.image_path:
    # Read from file path
    img_path = pathlib.Path(args.image_path)
    if not img_path.is_file():
        sys.exit("Invalid image path")
    img_path = str(img_path.resolve())
    results = image_to_text_from_path(img_path)
else:
    # Default: capture screenshot selection
    import tempfile
    import os

    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
        tmp_path = tmp.name

    try:
        sh.screenshot('selection', tmp_path, _ok_code=[0])
        if not os.path.exists(tmp_path) or os.path.getsize(tmp_path) == 0:
            sys.exit("Screenshot capture failed or was cancelled")
        results = image_to_text_from_path(tmp_path)
    except sh.ErrorReturnCode:
        sys.exit("Failed to capture screenshot")
    finally:
        if os.path.exists(tmp_path):
            os.unlink(tmp_path)

output_text = '\n'.join(text for text, confidence in results)

if args.copy:
    import pyperclip
    pyperclip.copy(output_text)
    print("Text copied to clipboard")
else:
    print(output_text)