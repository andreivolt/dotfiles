#!/usr/bin/env ruby

require "bundler/inline"

$VERBOSE = nil

gemfile do
  source :rubygems
  gem "ruby-openai"
end

require "base64"
require "json"
require "optparse"
require "tempfile"

options = {
  prompt: "What's in this image?",
  capture: false,
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options] [<image_file>...]"
  opts.on("-p", "--prompt=PROMPT", "Set a custom prompt text (default: #{options[:prompt]})")
  opts.on("-c", "--capture", "Capture a region using macOS screencapture (default: #{options[:capture]})")
end.parse!(into: options)

abort "missing OpenAI API key" if ENV["OPENAI_API_KEY"].nil?

base64_images = (
  ARGV.map do |file|
    abort "File not found: #{file}" unless File.file?(file)
    File.read(file)
  end + [
    if options[:capture]
      Tempfile.create(["captured", ".png"]) do |tempfile|
        `screencapture -i -s -t png #{tempfile.path}`
        File.read(tempfile.path)
      end
    elsif !$stdin.tty?
      $stdin.read
    end
  ].compact
).map { |data| Base64.encode64(data) }

abort "Please provide at least one valid image file as a positional argument, use the -c option to capture a region, or pipe the image data to stdin." if base64_images.empty?

response = OpenAI::Client.new(access_token: ENV["OPENAI_API_KEY"]).chat(
  parameters: {
    model: "gpt-4-vision-preview",
    messages: [
      {
        role: "user",
        content: [
          { type: "text", text: options[:prompt] },
          *base64_images.map { |base64_image| { type: "image_url", image_url: { url: "data:image/png;base64,#{base64_image}" } } }
        ]
      }
    ],
  }
)

puts response.dig("choices", 0, "message", "content")
