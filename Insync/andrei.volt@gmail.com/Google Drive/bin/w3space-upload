#!/usr/bin/env -S deno run --allow-read --allow-write --allow-net --allow-env --allow-run --allow-sys --ext ts

import { create } from 'npm:@web3-storage/w3up-client';
import { parse } from "https://deno.land/std/flags/mod.ts";
import { contentType } from "https://deno.land/std/media_types/mod.ts";

function generateRandomId(length = 8) {
  return Array.from({ length }, () => Math.floor(Math.random() * 36).toString(36)).join('');
}

async function copyToClipboard(text: string) {
  const process = Deno.run({
    cmd: ["pbcopy"],
    stdin: "piped",
  });
  await process.stdin.write(new TextEncoder().encode(text));
  process.stdin.close();
  await process.status();
}

async function setupClient() {
  const client = await create();

  const EMAIL = Deno.env.get("EMAIL");
  if (!EMAIL) {
    console.error("Error: EMAIL environment variable is not set.");
    Deno.exit(1);
  }

  const proofs = await client.proofs();
  if (proofs.length === 0) {
    await client.login(EMAIL);
    console.log("Check your email for the confirmation link and click it.");
    await new Promise(resolve => setTimeout(resolve, 30000));
  }

  const spaces = await client.spaces();

  if (spaces.length === 0) {
    console.error("No spaces available. Please create a space in your web3.storage account.");
    Deno.exit(1);
  }

  const space = spaces[0];
  await client.setCurrentSpace(space.did());

  return client;
}

async function main() {
  const args = parse(Deno.args, {
    string: ["filename"],
    boolean: ["clipboard", "help"],
    alias: { f: "filename", c: "clipboard", h: "help" },
  });

  if (args.help) {
    console.log("Usage: web3-storage-upload [options] [file_path]");
    console.log("Options:");
    console.log("  -f, --filename=NAME  Set filename");
    console.log("  -c, --clipboard      Copy to clipboard");
    console.log("  -h, --help           Show help");
    Deno.exit(0);
  }

  let filePath: string;
  let fileName: string;

  if (args._[0]) {
    filePath = args._[0] as string;
    fileName = args.filename || filePath.split("/").pop() || "unknown";
  } else {
    const stdinContent = await Deno.readAll(Deno.stdin);
    const tmpDir = await Deno.makeTempDir();
    const mimeType = contentType(stdinContent) || "application/octet-stream";
    const ext = mimeType.split("/").pop() || "";
    fileName = args.filename || `${generateRandomId()}${ext ? `.${ext}` : ""}`;
    filePath = `${tmpDir}/${fileName}`;
    await Deno.writeFile(filePath, stdinContent);
  }

  try {
    const client = await setupClient();

    const file = await Deno.readFile(filePath);
    const blob = new Blob([file]);
    const cid = await client.uploadFile(blob, { name: fileName });

    const url = `https://w3s.link/ipfs/${cid}`;

    if (args.clipboard) {
      await copyToClipboard(url);
      console.log('URL copied to clipboard');
    } else {
      console.log(url);
    }
  } catch (error) {
    console.error('Error:', error.message);
    Deno.exit(1);
  } finally {
    if (!args._[0]) {
      await Deno.remove(filePath);
    }
  }
}

if (import.meta.main) {
  main();
}
