#!/usr/bin/env ruby
require 'bundler/inline'
gemfile do
  source :rubygems
  gem 'httparty'
end
require 'cgi'
require 'json'
require 'optparse'

api_key = ENV['GOOGLE_API_KEY']
video_id = ARGV[0]

abort "Usage: #{__FILE__} VIDEO_ID [--json]" if video_id.nil?
abort "Ensure GOOGLE_API_KEY is set in your environment variables." if api_key.nil?

def clean_username(username)
  username.to_s.gsub(/^@@?/, '')
end

def clean_text(text)
  return '' if text.nil?

  # First unescape HTML entities
  text = CGI.unescapeHTML(text.to_s)

  # Replace <br> tags with newlines
  text = text.gsub('<br><br>', "\n\n").gsub('<br>', "\n")

  # Remove @ mentions at the start of the text
  text = text.gsub(/^@@?\w+\s+/, '')

  text.strip
end

def organize_replies(replies)
  conversation = []
  reply_map = {}

  # First pass: Create a map of replies and initialize conversation
  replies.each do |reply|
    reply_map[reply['id']] = {
      'author' => clean_username(reply['author']),
      'date' => reply['date'],
      'text' => clean_text(reply['text']),
      'replies' => [],
      'parent_author' => nil
    }
  end

  # Second pass: Build the conversation tree
  replies.each do |reply|
    text = reply['text'].to_s
    parent_match = text.match(/^@@?(\w+)/)

    if parent_match
      parent_author = parent_match[1]
      # Find the most recent comment by this author
      parent_reply = reply_map.values.reverse.find { |r| r['author'] == parent_author }

      if parent_reply
        parent_reply['replies'] << reply_map[reply['id']]
        reply_map[reply['id']]['parent_author'] = parent_author
        next
      end
    end

    # If no parent found or no @ mention, add to top level
    conversation << reply_map[reply['id']] unless reply_map[reply['id']]['parent_author']
  end

  conversation
end

def print_comment_tree(comment, options, level = 0, is_last = false, prefix = '')
  return if comment.nil?

  current_prefix = prefix + (is_last ? '└─ ' : '├─ ')

  author = comment['author']
  date = comment['date']
  text = clean_text(comment['text'])

  # Skip empty comments
  return if author.empty? || text.empty?

  formatted_text = text.gsub("\n", "\n#{prefix}#{is_last ? ' ' : '│ '}")

  puts "#{current_prefix}#{author} (#{date}):"
  puts "#{prefix}#{is_last ? ' ' : '│ '}#{formatted_text}"
  puts "#{prefix}#{is_last ? ' ' : '│'}"

  if comment['replies'] && !comment['replies'].empty?
    last_index = comment['replies'].length - 1
    comment['replies'].each_with_index do |reply, index|
      print_comment_tree(reply, options, level + 1, index == last_index, prefix + (is_last ? ' ' : '│ '))
    end
  end
end

begin
  options = { json: false }
  OptionParser.new do |opts|
    opts.banner = "Usage: #{__FILE__} VIDEO_ID [options]"
    opts.on("--json", "Output comments in JSON format")
  end.parse!(into: options)

  comments = []
  page_token = nil

  loop do
    response = HTTParty.get('https://www.googleapis.com/youtube/v3/commentThreads', query: {
      part: 'snippet',
      videoId: video_id,
      maxResults: 100,
      pageToken: page_token,
      key: api_key
    }).parsed_response

    break if response['error']

    response['items'].each do |item|
      top_level_comment = item.dig('snippet', 'topLevelComment', 'snippet')
      next if top_level_comment.nil?

      replies = []
      if (item['snippet']['totalReplyCount'] || 0) > 0
        replies_response = HTTParty.get('https://www.googleapis.com/youtube/v3/comments', query: {
          part: 'snippet',
          parentId: item['snippet']['topLevelComment']['id'],
          maxResults: 100,
          key: api_key
        }).parsed_response

        unless replies_response['error']
          replies = replies_response['items'].map do |reply|
            snippet = reply['snippet']
            {
              'id' => reply['id'],
              'author' => snippet['authorDisplayName'].to_s.strip,
              'date' => snippet['publishedAt'],
              'text' => snippet['textDisplay']
            }
          end

          # Organize replies into conversations
          if replies.length > 0
            organized_replies = organize_replies(replies)

            # Add the organized conversation to comments
            if organized_replies.any?
              comments << {
                'author' => clean_username(top_level_comment['authorDisplayName']),
                'date' => top_level_comment['publishedAt'],
                'text' => clean_text(top_level_comment['textDisplay']),
                'replies' => organized_replies
              }
            end
          end
        end
      end
    end

    page_token = response['nextPageToken']
    break unless page_token
  end

  comments.each do |comment|
    print_comment_tree(comment, options)
  end

rescue => e
  abort "Error: #{e.message}"
end
