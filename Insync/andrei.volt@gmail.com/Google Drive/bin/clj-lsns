#!/usr/bin/env bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 '<library> {:mvn/version \"version\"}'"
    exit 1
fi

clojure -Sdeps "{ :deps { $1
                          org.clojure/tools.namespace {:mvn/version \"1.1.0\"}
                          org.clojure/java.classpath {:mvn/version \"1.0.0\"}
                          nrepl/nrepl {:mvn/version \"0.9.0\"} } }" \
-e "
(require '[clojure.string :as str]
         '[clojure.java.classpath :as cp]
         '[clojure.tools.namespace.find :as find])

;; Extract the library prefix from the argument
(def lib-prefix \"$(echo $1 | cut -d'/' -f1)\")

;; Get directories and JAR files on the classpath
(let [jars (cp/classpath-jarfiles)
      dirs (cp/classpath-directories)
      ;; Find namespaces in both JARs and directories
      all-ns-syms (concat
                    (mapcat find/find-namespaces-in-jarfile jars)
                    (mapcat find/find-namespaces-in-dir dirs))]
  ;; Require namespaces that start with the provided library prefix
  (doseq [ns-sym (filter #(str/starts-with? (str %) lib-prefix) all-ns-syms)]
    (try
      (require ns-sym)
      (catch Exception e
        (println \"Could not require\" ns-sym \":\" (.getMessage e)))))
  ;; Iterate over loaded namespaces and print their public symbols with signatures and docstrings
  (doseq [ns (filter #(str/starts-with? (str (ns-name %)) lib-prefix) (all-ns))]
    (println (ns-name ns))
    (doseq [[sym var] (sort-by key (ns-publics ns))]
      (println \"  \" sym)
      (let [m (meta var)]
        (when-let [args (:arglists m)]
          (println \"    Arglists:\" args))
        (when-let [doc (:doc m)]
          (println \"    Doc:\" doc))))
    (println \"---\")))
"
