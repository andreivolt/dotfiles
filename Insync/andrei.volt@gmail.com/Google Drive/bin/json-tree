#!/usr/bin/env bb

(require '[cheshire.core :as json]
         '[clojure.string :as str])

;; Function to display usage information
(defn usage []
  (println "Usage: json-tree -m MAIN_KEY [-k META_KEYS]")
  (System/exit 1))

;; Function to parse command-line arguments
(defn parse-args [args]
  (loop [args args
         opts {}]
    (if (empty? args)
      opts
      (let [[arg & remaining-args] args]
        (cond
          (or (= arg "-h") (= arg "--help"))
          (do (usage))

          (or (= arg "-m") (= arg "--main-key"))
          (if-let [val (first remaining-args)]
            (recur (rest remaining-args) (assoc opts :main-key val))
            (usage))

          (or (= arg "-k") (= arg "--meta-keys"))
          (if-let [val (first remaining-args)]
            (recur (rest remaining-args) (assoc opts :meta-keys (str/split val #",")))
            (usage))

          :else
          (usage))))))

(let [{:keys [main-key meta-keys]} (parse-args *command-line-args*)]
  (if (not main-key)
    (usage)
    (let [input (json/parse-stream (java.io.InputStreamReader. System/in "UTF-8") true)

          ;; Check if stdout is a terminal
          is-tty (not (nil? (System/console)))

          ;; Get terminal width (default to 80 when not a tty)
          term-width (if is-tty
                       nil  ; Don't wrap when output is to terminal
                       80)  ; Wrap when output is piped

          ;; Function to generate prefixes for the current line
          generate-prefix (fn [prefix is-last]
                            (str prefix
                                 (if is-last
                                   "└─ "
                                   "├─ ")))

          ;; Recursive function to print the tree
          print-node (fn print-node [node prefix is-last]
                       (let [meta-line (str/join " · " (map #(get node (keyword %)) meta-keys))
                             main-text (get node (keyword main-key))
                             current-prefix (generate-prefix prefix is-last)
                             indent-prefix (str prefix (if is-last "   " "│  "))
                             full-text (str current-prefix meta-line)
                             ;; Calculate wrap width
                             wrap-width (when term-width
                                          (let [indent-len (count (re-find #".*\S" indent-prefix))]
                                            (- term-width indent-len)))
                             ;; Prepare the main text
                             formatted-text (if wrap-width
                                              ;; Wrap the text
                                              (->> (str/split main-text #"\s+")
                                                   (reduce (fn [lines word]
                                                             (let [last-line (last lines)
                                                                   new-line (if last-line
                                                                              (str last-line " " word)
                                                                              word)]
                                                               (if (<= (count new-line) wrap-width)
                                                                 (conj (vec (butlast lines)) new-line)
                                                                 (conj lines word))))
                                                           [])
                                                   (str/join (str "\n" indent-prefix)))
                                              ;; No wrapping
                                              main-text)]

                         ;; Print the meta line
                         (println full-text)
                         ;; Print the main text
                         (println (str indent-prefix formatted-text))

                         ;; Process children
                         (when-let [children (:children node)]
                           (let [last-index (dec (count children))]
                             (doseq [idx (range (count children))]
                               (let [child (nth children idx)
                                     child-is-last (= idx last-index)]
                                 (print-node child indent-prefix child-is-last)))))))]

      ;; Start printing from the root nodes
      (doseq [idx (range (count input))]
        (let [node (nth input idx)
              is-last (= idx (dec (count input)))]
          (print-node node "" is-last))))))
